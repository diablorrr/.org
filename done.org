#+title: Done
#+STARTUP: show2levels


* archive
** 2024年
*** old
**** someday
***** [X] org-refile todo列表
+ 解决方式：只能通过自己写函数
***** [X] [#A] org-refile无法识别roam文件夹里的笔记
解决方式：org-roam-refile
***** [X] org-goto没法改键
+ 解决方式：org-goto.el发现有可以自定义的变量org-goto-auto-isearch，将其设置为nil即可
***** [X] org table插入删除行
+ 解决方式：相关函数记录在 *DoomEmacs使用手册*
***** [X] org table对齐
+ 解决方式：使用Sarasa Term SC Nerd字体(更纱终端书呆黑体)
***** [X] org-agenda-files在config.el中设置无效，总是被覆盖
+ 问题所在：customize中设置了值
+ 解决方式：删除customize中的值
***** [X] org-freemind-export-to-freemind 导出mm文件的层级问题
+ 解决方式：ox-freemind.el -> org-freemind-section函数 -> org-export-low-level-p函数 -> headline-levels属性 -> 自定义变量org-export-headine-levels，修改值
***** [X] ox-freemind自定义变量未出现的问题
+ 解决方式：在config.el中用require去加载feature
***** [X] 设置org export导出目录
+ 解决方式：在任意一个导出函数中会发现org-export-output-file-name，这个又和属性#+EXPORT_FILE_NAME:有关，因此只要在org文件中加入就行，例：#+EXPORT_FILE_NAME: ~/.org/export/DoomEmacs使用手册
***** [X] 上下buffer变成左右buffer
+ 解决方法：使用package：transpose-frame

***** [X] 创建自己的主题
+ 解决方式：customize-create-theme保存主题；describe-face自定义主题相关
***** [X] yas设计模板内容如下
:PROPERTIES:
:NOTER_PAGE: XXX
:END:
+ 解决方式：用[[id:13d1007d-c805-482c-bf95-5e53ba86bf4c][DoomEmacs.org]]的方法
***** [X] imenu-list的Ilist的heading重复显示的问题
+ 解决方式：doom upgrade后doom sync
***** [X] 改当我在Ilist中才有的快捷键
+ 解决方式：因为Ilist的主mode是imenu-list-major-mode，使用:after;然后改对应keymap
***** [X] which-key没法切换
+ 解决方式：将which-key-use-C-h-commands设置为t
***** [X] tree-sitter的使用
+ 解决方式：使用第三方的tree-sitter，不去使用内置的treesit(如：xx-ts-mode)就行。只要tree-sitter-hl-mode启动了就是成功。
***** [X] :PROPERTIES:的属性有哪些？在哪查找
+ 解决方式：在org info的Properties and Columns中查看
***** [X] org-noter笔记buffer下翻pdf的页
+ 解决方式：在config中写了函数
***** [X] org-noter翻笔记自动同步pdf位置
+ 解决方式：函数org-noter-sync-prev-note，org-noter-sync-next-note
***** [X] org-noter或pdf-tools是否有插入图片的函数
+ 解决方式：还是使用org-download
*** 12月
**** 3周
***** DONE 鳄鱼人的梦 :dream:
***** DONE [#B] 将.org里的笔记迁移到org-roam
***** DONE [#A] 整理notes.org笔记
#+BEGIN: clocktable :scope subtree :maxlevel 2
#+CAPTION: Clock summary at [2024-12-22 日 14:05]
| Headline          | Time |
|-------------------+------|
| *Total time*        | *0:48* |
|-------------------+------|
| 整理notes.org笔记 | 0:48 |
#+END:

DEADLINE: <2024-12-22 日 14:20> SCHEDULED: <2024-12-22 日>
:LOGBOOK:
CLOCK: [2024-12-22 日 13:58]--[2024-12-22 日 14:05] =>  0:07
CLOCK: [2024-12-22 日 13:27]--[2024-12-22 日 13:55] =>  0:28
CLOCK: [2024-12-22 日 13:13]--[2024-12-22 日 13:26] =>  0:13
:END:
***** DONE [#B] archive研究 [3/3]
:LOGBOOK:
CLOCK: [2024-12-22 日 14:56]--[2024-12-22 日 15:19] =>  0:23
:END:
- [X] 归档模板调研
- [X] 归档模板设计(以日期为主)
  + 解决方式：用yas丑陋的实现了。未来改进
- [X] org-refile定义归档位置
  + org-refile-targets
***** DONE [#B] gtd工作流 [5/5]
DEADLINE: <2024-12-22 日 16:08> SCHEDULED: <2024-12-21 六>
#+BEGIN: clocktable :scope subtree :maxlevel 2
#+CAPTION: Clock summary at [2024-12-22 日 14:50]
| Headline        | Time |
|-----------------+------|
| *Total time*      | *0:29* |
|-----------------+------|
| gtd工作流 [5/5] | 0:29 |
#+END:

:LOGBOOK:
CLOCK: [2024-12-22 日 14:39]--[2024-12-22 日 14:49] =>  0:10
CLOCK: [2024-12-22 日 12:58]--[2024-12-22 日 13:00] =>  0:02
CLOCK: [2024-12-22 日 12:44]--[2024-12-22 日 12:54] =>  0:10
CLOCK: [2024-12-22 日 12:19]--[2024-12-22 日 12:21] =>  0:02
CLOCK: [2024-12-21 六 21:33]--[2024-12-21 六 21:38] =>  0:05
:END:
- [X] org-capture做一个daily任务的模板：* 时间
- [X] org-agenda的使用
- [X] 记录完成某任务所花费的时长
- [X] 研究别人的gtd工作流
- [X] 设置.org目录下gtd所需要的文件
***** DONE [#B] todo的headline研究
***** DONE [#B] org-refile在headline的位置不对
+ org-refile-targets设置的层级不对，从3->4后正确了(X)，因为*下面有+或-，如果headline展开了，那也可以
***** DONE [#B] 在一个文件中，设置标记，实现快速跳转
+ 解决方法(适用于当前buffer)C-SPC C-SPC标记，C-u C-SPC跳转
***** DONE [#B] 处理inbox.org的内容
***** DONE [#B] 日常循环的工作实现
+ 记录在DoomEmacs.org的org-timestamp
***** DONE [#B] org-Pomodoro设置铃声 [2024-12-22 日 17:31]
***** DONE [#B] 设置TODO各种状态的颜色 [2024-12-22 日 17:07]
:LOGBOOK:
CLOCK: [2024-12-22 日 18:37]--[2024-12-22 日 18:48] =>  0:11
:END:
**** 4周
***** DONE [#B] yas生成模板 标题 版本 作者 邮箱 更新时间[2024-12-23 一 08:58]
:LOGBOOK:
CLOCK: [2024-12-23 一 11:02]--[2024-12-23 一 11:13] =>  0:11
:END:
***** DONE [#A] 见中介房东 [2024-12-22 日 20:28]
DEADLINE: <2024-12-23 一 16:00> SCHEDULED: <2024-12-23 一 14:00>
***** DONE [#B] 拿快递 [2024-12-23 一 11:01]
***** DONE [#B] check学硕毕业要求 [2024-12-23 一 09:35]
:LOGBOOK:
CLOCK: [2024-12-23 一 19:51]--[2024-12-23 一 19:56] =>  0:05
:END:
***** DONE [#A] Mamba论文 [3/3] [2024-12-22 日 17:13]
DEADLINE: <2024-12-24 二 11:00> SCHEDULED: <2024-12-22 日>
****** DONE 阅读论文
:LOGBOOK:
CLOCK: [2024-12-23 一 10:46]--[2024-12-23 一 10:53] =>  0:07
CLOCK: [2024-12-23 一 09:54]--[2024-12-23 一 10:39] =>  0:45
CLOCK: [2024-12-23 一 09:01]--[2024-12-23 一 09:52] =>  0:51
CLOCK: [2024-12-23 一 08:13]--[2024-12-23 一 09:01] =>  0:48
CLOCK: [2024-12-22 日 21:08]--[2024-12-22 日 21:41] =>  0:33
CLOCK: [2024-12-22 日 20:32]--[2024-12-22 日 21:03] =>  0:31
:END:
****** KILL 实验复现
:LOGBOOK:
CLOCK: [2024-12-23 一 15:41]--[2024-12-23 一 16:15] =>  0:34
:END:
****** DONE 做ppt
:LOGBOOK:
CLOCK: [2024-12-23 一 19:57]--[2024-12-23 一 20:42] =>  0:45
CLOCK: [2024-12-23 一 16:26]--[2024-12-23 一 17:10] =>  0:44
:END:

***** DONE [#B] 子任务全部DONE后，父任务自动转为DONE [2024-12-24 二 13:16]
***** DONE [#B] 双创守门 [2024-12-22 日 19:39]
SCHEDULED: <2024-12-25 三 08:00>
***** DONE [#B] yas新建箭头 [2/2] [2024-12-24 二 16:20]
SCHEDULED: <2024-12-24 二 16:30>
****** [X] 查看yas仓库，记录相关笔记
:LOGBOOK:
CLOCK: [2024-12-24 二 17:21]--[2024-12-24 二 17:50] =>  0:29
CLOCK: [2024-12-24 二 16:30]--[2024-12-24 二 17:15] =>  0:45
:END:
****** [X] 新建箭头
***** DONE [#B] org折叠指定的level
SCHEDULED: <2024-12-25 三 08:00>
:LOGBOOK:
CLOCK: [2024-12-25 三 08:24]--[2024-12-25 三 09:10] =>  0:46
CLOCK: [2024-12-25 三 09:15]--[2024-12-25 三 09:21] =>  0:06
:END:
***** DONE [#B] consult命令测试
SCHEDULED: <2024-12-25 三 14:02>
:LOGBOOK:
CLOCK: [2024-12-25 三 14:02]--[2024-12-25 三 14:26] =>  0:24
:END:
***** DONE [#B] 转义字符失效
SCHEDULED: <2024-12-25 三 14:40>
:LOGBOOK:
CLOCK: [2024-12-25 三 14:40]--[2024-12-25 三 14:51] =>  0:11
:END:
***** DONE [#B] agenda相关 [3/3] [2024-12-23 一]
****** DONE agenda文档阅读，做笔记
SCHEDULED: <2024-12-24 二>
:LOGBOOK:
CLOCK: [2024-12-24 二 19:07]--[2024-12-24 二 19:21] =>  0:14
CLOCK: [2024-12-24 二 18:39]--[2024-12-24 二 19:05] =>  0:26
CLOCK: [2024-12-24 二 17:52]--[2024-12-24 二 18:37] =>  0:45
CLOCK: [2024-12-23 一 21:16]--[2024-12-23 一 21:48] =>  0:32
:END:
****** DONE agenda视图一个时间段内的循环任务
SCHEDULED: <2024-12-25 三 15:00>
:LOGBOOK:
CLOCK: [2024-12-25 三 14:58]--[2024-12-25 三 15:59] =>  1:01
:END:
****** DONE org-agenda视图的deadline颜色修改
:LOGBOOK:
CLOCK: [2024-12-24 二 21:28]--[2024-12-24 二 21:48] =>  0:20
CLOCK: [2024-12-24 二 20:57]--[2024-12-24 二 21:26] =>  0:29
:END:
***** DONE [#B] agenda buffer修改week逻辑
CLOSED: [2024-12-26 四 17:25] SCHEDULED: <2024-12-26 四 17:25>
:LOGBOOK:
CLOCK: [2024-12-26 四 17:21]--[2024-12-26 四 17:25] =>  0:04
:END:
***** DONE [#B] 当状态设置为STAT时，自动启动时钟
CLOSED: [2024-12-26 四 17:46] SCHEDULED: <2024-12-26 四 17:30>
:LOGBOOK:
CLOCK: [2024-12-26 四 17:30]--[2024-12-26 四 17:44] =>  0:14
:END:
***** DONE [#B] 修改多任务的face [0/0]
CLOSED: [2024-12-26 四 19:10] SCHEDULED: <2024-12-26 四 16:55>
:LOGBOOK:
CLOCK: [2024-12-26 四 16:51]--[2024-12-26 四 17:21] =>  0:30
:END:
- 解决方式 :: describe-char => 发现应用了org-agenda-dimmed-todo-face => describe-variable => 设置变量org-agenda-dim-blocked-tasks为nil
***** DONE [#B] 重构done.org
CLOSED: [2024-12-26 四 19:43]
:LOGBOOK:
CLOCK: [2024-12-26 四 19:30]--[2024-12-26 四 19:43] =>  0:13
:END:
***** DONE 取快递给刘老师
SCHEDULED: <2024-12-26 四>
** 2025年
*** old
**** DONE [#C] 迁移到emacs [3/3]
SCHEDULED: <2024-12-26 四>
:LOGBOOK:
CLOCK: [2024-12-27 五 20:32]--[2024-12-27 五 21:48] =>  1:16
:END:
***** DONE 迁移md文件到emacs
:LOGBOOK:
CLOCK: [2024-12-28 六 13:35]--[2024-12-28 六 14:27] =>  0:52
:END:
***** DONE 记录会议时间
:LOGBOOK:
CLOCK: [2024-12-28 六 14:37]--[2024-12-28 六 14:50] =>  0:13
:END:
***** DONE 迁移google表格内容到emacs
:LOGBOOK:
CLOCK: [2024-12-31 二 12:40]--[2024-12-31 二 13:40] =>  1:00
CLOCK: [2024-12-28 六 14:58]--[2024-12-28 六 15:49] =>  0:51
:END:
**** DONE [#B] doom emacs安装qt编程环境
:LOGBOOK:
CLOCK: [2024-12-28 六 20:06]--[2024-12-28 六 20:21] =>  0:15
:END:
***** KILL [#B] make
***** DONE [#B] cmake
SCHEDULED: <2024-12-29 日 18:50>
:LOGBOOK:
CLOCK: [2024-12-30 一 13:57]--[2024-12-30 一 16:12] =>  2:15
CLOCK: [2024-12-29 日 18:51]--[2024-12-29 日 21:42] =>  2:51
:END:

***** DONE [#B] doom emacs中clangd无法找到qt头文件 [0/0]
:LOGBOOK:
CLOCK: [2024-12-30 一 16:12]--[2024-12-30 一 16:27] =>  0:15
:END:
**** DONE [#B] LightViM [2/2]
DEADLINE: <2025-01-01 三>
:LOGBOOK:
CLOCK: [2024-12-31 二 16:29]--[2024-12-31 二 16:41] =>  0:12
CLOCK: [2024-12-31 二 13:55]--[2024-12-31 二 15:49] =>  1:54
:END:
***** DONE 阅读&做笔记
***** DONE 做ppt
**** DONE [#C] tags探索 [0/0]
:LOGBOOK:
CLOCK: [2024-12-31 二 17:03]--[2024-12-31 二 17:22] =>  0:19
:END:
**** DONE [#B] org-roam设置标签 [0/0]
:LOGBOOK:
CLOCK: [2024-12-31 二 17:25]--[2024-12-31 二 17:47] =>  0:22
:END:
**** DONE [#B] 深度可分离卷积 [0/0] :科研:
SCHEDULED: <2025-01-01 三>
:LOGBOOK:
CLOCK: [2025-01-01 三 11:48]--[2025-01-01 三 12:22] =>  0:34
:END:
**** DONE [#C] 搬家计划 [6/6]
DEADLINE: <2024-12-29 日> SCHEDULED: <2024-12-26 四>
***** DONE 装床垫
***** DONE 买宽带
***** DONE 购置必要物品 [3/3]
- [X] 枕头
- [X] 垃圾桶
- [X] 垃圾袋
***** DONE 安装路由器
***** DONE 收拾房间
***** DONE 实验室拿东西 [4/4]
- [X] 增高桌垫
- [X] 屏幕
- [X] 插线板
- [X] 网线
**** DONE 杨的杂事 <2025-01-08 三>
**** DONE [#A] 软件工程管理：期末复习 [0/0]
SCHEDULED: <2025-01-04 六> DEADLINE: <2025-01-06 一 14:00>
:LOGBOOK:
CLOCK: [2025-01-05 日 17:58]--[2025-01-05 日 21:52] =>  3:54
:END:
**** DONE [#B] org-brain探索 [0/0]
:LOGBOOK:
CLOCK: [2025-01-06 一 15:36]--[2025-01-06 一 17:40] =>  2:04
:END:
**** DONE [#B] 订票 [0/0]
**** DONE [#B] Reactor模式
SCHEDULED: <2025-01-10 五>
:LOGBOOK:
CLOCK: [2025-01-10 五 23:08]--[2025-01-11 六 00:06] =>  0:58
:END:
**** DONE [#B] 条件变量 [0/0]
:LOGBOOK:
CLOCK: [2025-01-11 六 00:07]--[2025-01-11 六 00:13] =>  0:06
:END:
**** DONE [#B] 拷贝构造不加引用的后果 [0/0]
**** DONE [#B] cpp中的状态机 [0/0]
**** DONE [#B] 重构gtd
**** DONE [#B] Modern Cmake文档 [0/0]
SCHEDULED: <2025-01-08 三>
:LOGBOOK:
CLOCK: [2025-01-17 五 19:16]--[2025-01-17 五 19:38] =>  0:22
CLOCK: [2025-01-16 四 15:16]--[2025-01-16 四 16:42] =>  1:26
CLOCK: [2025-01-15 三 14:54]--[2025-01-15 三 15:20] =>  0:26
CLOCK: [2025-01-15 三 13:12]--[2025-01-15 三 14:45] =>  1:33
CLOCK: [2025-01-15 三 09:52]--[2025-01-15 三 10:52] =>  1:00
CLOCK: [2025-01-14 二 21:24]--[2025-01-14 二 21:43] =>  0:19
CLOCK: [2025-01-13 一 17:05]--[2025-01-13 一 18:45] =>  1:40
CLOCK: [2025-01-13 一 14:29]--[2025-01-13 一 16:32] =>  2:03
CLOCK: [2025-01-08 三 07:46]--[2025-01-08 三 09:46] =>  2:00
:END:
**** DONE [#B] 软件工程管理：第三次作业 [0/0]
DEADLINE: <2025-01-22 三>
:LOGBOOK:
CLOCK: [2025-01-21 二 21:15]--[2025-01-21 二 21:33] =>  0:18
:END:
**** DONE [#B] 存钱到银行卡
**** DONE [#B] 英语六级
**** DONE [#A] llfc cpp项目 [3/3] :项目:
***** DONE C++ asio网络编程 [29/29]
DEADLINE: <2025-01-15 三>
****** DONE (1) socket的监听和连接
:LOGBOOK:
CLOCK: [2025-01-03 五 10:21]--[2025-01-03 五 14:53] =>  4:32
:END:
****** DONE (2) buffer结构和同步读写
:LOGBOOK:
CLOCK: [2025-01-03 五 17:25]--[2025-01-03 五 18:26] =>  1:01
:END:
****** DONE (3) 同步读写和client示例
:LOGBOOK:
CLOCK: [2025-01-03 五 20:05]--[2025-01-03 五 21:45] =>  1:40
:END:
****** DONE (4) 异步读写api介绍和使用
:LOGBOOK:
CLOCK: [2025-01-04 六 13:06]--[2025-01-04 六 18:32] =>  5:26
:END:
****** DONE (5) 官方案例异步server及隐患
:LOGBOOK:
CLOCK: [2025-01-05 日 13:36]--[2025-01-05 日 13:52] =>  0:16
CLOCK: [2025-01-04 六 19:59]--[2025-01-04 六 21:51] =>  1:52
:END:
****** DONE (6) 利用伪闭包延长连接的生命周期
:LOGBOOK:
CLOCK: [2025-01-05 日 14:20]--[2025-01-05 日 17:52] =>  3:32
:END:
****** DONE (7) 增加发送队列实现全双工通信
:LOGBOOK:
CLOCK: [2025-01-07 二 15:49]--[2025-01-07 二 18:35] =>  2:46
CLOCK: [2025-01-07 二 13:47]--[2025-01-07 二 15:21] =>  1:34
CLOCK: [2025-01-06 一 19:57]--[2025-01-06 一 20:45] =>  0:48
:END:
****** DONE (8) 处理粘包问题
:LOGBOOK:
CLOCK: [2025-01-06 一 20:45]--[2025-01-06 一 21:46] =>  1:01
:END:
****** DONE (9) 字节序处理和发送队列控制
****** DONE (10) 采用protobuf序列化
SCHEDULED: <2025-01-09 四>
:LOGBOOK:
CLOCK: [2025-01-09 四 14:49]--[2025-01-09 四 15:26] =>  0:37
CLOCK: [2025-01-08 三 19:24]--[2025-01-08 三 19:42] =>  0:18
CLOCK: [2025-01-07 二 21:07]--[2025-01-07 二 21:42] =>  0:35
:END:
****** DONE (11) 采用json序列化
SCHEDULED: <2025-01-09 四>
:LOGBOOK:
CLOCK: [2025-01-08 三 10:44]--[2025-01-08 三 10:55] =>  0:11
:END:
****** DONE (12) asio粘包处理的简单方式
SCHEDULED: <2025-01-09 四>
:LOGBOOK:
CLOCK: [2025-01-09 四 16:06]--[2025-01-09 四 16:20] =>  0:14
CLOCK: [2025-01-08 三 18:34]--[2025-01-08 三 18:35] =>  0:01
CLOCK: [2025-01-08 三 14:44]--[2025-01-08 三 15:25] =>  0:41
CLOCK: [2025-01-08 三 10:55]--[2025-01-08 三 10:56] =>  0:01
:END:
****** DONE (13) 逻辑层架构概述
SCHEDULED: <2025-01-09 四>
:LOGBOOK:
CLOCK: [2025-01-09 四 17:51]--[2025-01-09 四 18:39] =>  0:48
CLOCK: [2025-01-08 三 20:34]--[2025-01-08 三 21:14] =>  0:40
:END:
****** DONE (14) 利用单例逻辑实现逻辑类
SCHEDULED: <2025-01-10 五>
:LOGBOOK:
CLOCK: [2025-01-10 五 17:14]--[2025-01-10 五 17:50] =>  0:36
CLOCK: [2025-01-09 四 19:04]--[2025-01-09 四 21:00] =>  1:56
:END:
****** DONE (15) 服务器优雅退出
SCHEDULED: <2025-01-10 五>
:LOGBOOK:
CLOCK: [2025-01-09 四 21:24]--[2025-01-09 四 21:36] =>  0:12
:END:
****** DONE (16) asio多线程模型IOServicePool
SCHEDULED: <2025-01-10 五>
:LOGBOOK:
CLOCK: [2025-01-10 五 22:24]--[2025-01-10 五 23:08] =>  0:44
CLOCK: [2025-01-10 五 20:32]--[2025-01-10 五 21:31] =>  0:59
CLOCK: [2025-01-09 四 23:24]--[2025-01-10 五 00:13] =>  0:49
:END:
****** DONE (17) asio另一种多线程模型IOThreadPool
SCHEDULED: <2025-01-11 六>
:LOGBOOK:
CLOCK: [2025-01-11 六 12:54]--[2025-01-11 六 13:55] =>  1:01
CLOCK: [2025-01-11 六 12:37]--[2025-01-11 六 12:38] =>  0:01
CLOCK: [2025-01-10 五 10:01]--[2025-01-10 五 11:01] =>  1:00
CLOCK: [2025-01-10 五 15:01]--[2025-01-10 五 15:24] =>  0:23
:END:
****** DONE (18) 使用asio协程搭建异步服务器
SCHEDULED: <2025-01-11 六>
:LOGBOOK:
CLOCK: [2025-01-11 六 13:56]--[2025-01-11 六 14:06] =>  0:10
:END:
****** DONE (19) 利用协程实现并发服务器(上)
SCHEDULED: <2025-01-11 六>
:LOGBOOK:
CLOCK: [2025-01-11 六 15:07]--[2025-01-11 六 15:20] =>  0:13
:END:
****** DONE (20) 利用协程实现并发服务器(下)
SCHEDULED: <2025-01-11 六>
:LOGBOOK:
CLOCK: [2025-01-11 六 15:20]--[2025-01-11 六 15:44] =>  0:24
:END:
****** DONE (21) asio实现http服务器
SCHEDULED: <2025-01-12 日>
:LOGBOOK:
CLOCK: [2025-01-14 二 07:53]--[2025-01-14 二 09:50] =>  1:57
CLOCK: [2025-01-11 六 20:21]--[2025-01-11 六 21:12] =>  0:51
CLOCK: [2025-01-11 六 16:10]--[2025-01-11 六 16:30] =>  0:20
:END:
****** DONE (22) beast网络库实现http服务器
SCHEDULED: <2025-01-12 日>
:LOGBOOK:
CLOCK: [2025-01-14 二 09:50]--[2025-01-14 二 10:14] =>  0:24
CLOCK: [2025-01-13 一 08:03]--[2025-01-13 一 09:42] =>  1:39
CLOCK: [2025-01-12 日 18:03]--[2025-01-12 日 18:31] =>  0:28
CLOCK: [2025-01-11 六 23:06]--[2025-01-11 六 23:09] =>  0:03
CLOCK: [2025-01-11 六 21:19]--[2025-01-11 六 21:46] =>  0:27
:END:
****** DONE (23) beast网络库实现websocket服务器
SCHEDULED: <2025-01-15 三>
:LOGBOOK:
CLOCK: [2025-01-15 三 15:20]--[2025-01-15 三 15:35] =>  0:15
CLOCK: [2025-01-14 二 15:05]--[2025-01-14 二 16:37] =>  1:32
:END:
****** KILL (24) windows环境下grpc配置和编译
SCHEDULED: <2025-01-13 一>
****** KILL (25) 利用grpc通信
SCHEDULED: <2025-01-13 一>
:LOGBOOK:
CLOCK: [2025-01-14 二 20:40]--[2025-01-14 二 20:45] =>  0:05
:END:
****** DONE C++ Docker配置 C++ boost 开发环境
SCHEDULED: <2025-01-13 一>
:LOGBOOK:
CLOCK: [2025-01-14 二 18:35]--[2025-01-14 二 19:25] =>  0:50
:END:
****** DONE C++ Linux Docker 环境安装和使用grpc和jsoncpp
SCHEDULED: <2025-01-13 一>
****** KILL 实现文件传输
****** KILL Udp打洞服务代码
***** DONE C++ 并发编程 [30/30]
****** DONE (1) 线程基础，为什么线程参数默认传参方式是值拷贝？
SCHEDULED: <2025-01-15 三>
:LOGBOOK:
CLOCK: [2025-01-16 四 18:58]--[2025-01-16 四 21:04] =>  2:06
:END:
****** DONE (2) 线程所属权管理
SCHEDULED: <2025-01-15 三>
:LOGBOOK:
CLOCK: [2025-01-16 四 21:04]--[2025-01-16 四 21:40] =>  0:36
:END:
****** DONE (3) 互斥和死锁
:LOGBOOK:
CLOCK: [2025-01-18 六 14:38]--[2025-01-18 六 16:24] =>  1:46
:END:
****** DONE (4) unique_lock,共享锁以及递归锁
:LOGBOOK:
CLOCK: [2025-01-18 六 17:34]--[2025-01-18 六 18:03] =>  0:29
:END:
****** DONE (5) 实现线程安全单例模式
:LOGBOOK:
CLOCK: [2025-01-18 六 18:54]--[2025-01-18 六 19:24] =>  0:30
:END:
****** DONE (6) 利用条件变量实现线程安全队列
:LOGBOOK:
CLOCK: [2025-01-19 日 12:30]--[2025-01-19 日 14:06] =>  1:36
:END:
****** DONE (7) 并发三剑客async,promise和future
:LOGBOOK:
CLOCK: [2025-01-19 日 14:54]--[2025-01-19 日 16:57] =>  2:03
:END:
****** DONE (8) 利用并行和函数式编程提升计算效率
:LOGBOOK:
CLOCK: [2025-01-19 日 16:58]--[2025-01-19 日 20:31] =>  3:33
:END:
****** DONE (9) 两种并发设计模式Actor和CSP
:LOGBOOK:
CLOCK: [2025-01-20 一 13:55]--[2025-01-20 一 14:19] =>  0:24
CLOCK: [2025-01-19 日 20:31]--[2025-01-19 日 21:41] =>  1:10
:END:
****** DONE (10) 答疑汇总(async和thread源码解读)
:LOGBOOK:
CLOCK: [2025-01-20 一 14:46]--[2025-01-20 一 17:01] =>  2:15
CLOCK: [2025-01-20 一 14:19]--[2025-01-20 一 14:23] =>  0:04
:END:
****** DONE (11) 原子操作和内存模型
:LOGBOOK:
CLOCK: [2025-01-21 二 21:34]--[2025-01-22 三 00:57] =>  3:23
:END:
****** DONE (12) 利用内存顺序实现内存模型
:LOGBOOK:
CLOCK: [2025-01-22 三 13:13]--[2025-01-22 三 14:09] =>  0:56
:END:
****** DONE (13) 利用内存顺序和原子变量实现无锁队列
:LOGBOOK:
CLOCK: [2025-01-22 三 14:09]--[2025-01-22 三 14:32] =>  0:23
:END:
****** DONE (14) 利用栅栏实现同步模型
:LOGBOOK:
CLOCK: [2025-01-23 四 00:00]--[2025-01-23 四 00:32] =>  0:32
:END:
****** KILL (15) 基于锁实现线程安全的队列和栈
****** KILL (16) 实现线程安全的查找表
****** KILL (17) 基于锁实现线程安全的链表
****** KILL (18) 线程安全的无锁栈实现
****** KILL (19) 运用风险指针实现无锁栈
****** KILL (20) 利用引用计数实现无锁并发栈
****** KILL (21) 内存模型(同步,先行,释放序列)复习
****** KILL (22) 利用内存模型优化无锁栈
****** KILL (23) 双引用实现无锁队列
****** KILL (24) 无锁并发设计的四条原则
****** DONE (25) 线程划分任务的方式
:LOGBOOK:
CLOCK: [2025-01-24 五 15:37]--[2025-01-24 五 16:24] =>  0:47
:END:
****** KILL (26) 几种stl算法的并行实现(for_each, partial_sum, find)
****** DONE (27) 线程池原理和实现
:LOGBOOK:
CLOCK: [2025-01-24 五 16:24]--[2025-01-24 五 16:25] =>  0:01
:END:
****** DONE (28) 几种线程池方案(轮询，等待future任务，避免争夺，任务窃取)
****** KILL (29) 封装可中断线程
****** DONE (30) 多线程排错思路(完结)
***** DONE C++ 全栈聊天项目 第一季 [40/40]
****** DONE Qt Creator改键
:LOGBOOK:
CLOCK: [2024-12-30 一 20:00]--[2024-12-30 一 20:17] =>  0:17
:END:
****** DONE (1) 架构概述和登录界面
****** DONE (2) 内存泄漏修复和qss样式切换
:LOGBOOK:
CLOCK: [2025-01-01 三 00:38]--[2025-01-01 三 01:03] =>  0:25
CLOCK: [2024-12-31 二 19:26]--[2024-12-31 二 21:43] =>  2:17
:END:
****** DONE (3) CRTP实现Http管理者
:LOGBOOK:
CLOCK: [2025-01-01 三 20:17]--[2025-01-01 三 21:56] =>  1:39
CLOCK: [2025-01-01 三 14:39]--[2025-01-01 三 18:32] =>  3:53
:END:
****** DONE (4) visualstudio配置boost与jsoncpp
:LOGBOOK:
CLOCK: [2025-01-03 五 09:41]--[2025-01-03 五 10:20] =>  0:39
CLOCK: [2025-01-02 四 19:54]--[2025-01-02 四 21:43] =>  1:49
:END:
****** DONE (5) Beast实现http get请求处理
:LOGBOOK:
CLOCK: [2024-12-30 一 20:18]--[2024-12-30 一 21:49] =>  1:31
:END:
****** DONE (6) Beast实现http post请求处理
****** DONE (7) 客户端实现Post验证码请求
****** DONE (8) windows配置和使用grpc
****** DONE (9) nodejs实现邮箱验证服务
****** DONE (10) 使用iocontext连接池提高并发
****** DONE (11) redis环境配置和使用
****** DONE (12) C++封装redis连接池
****** DONE (13) 实现验证码服务和用户注册功能
****** DONE (14) 封装Mysql连接池
****** DONE (15) 实现自定义可点击Label以及定时按钮
****** DONE (16) 重置密码功能
****** DONE (17) 登录验证和状态服务
****** DONE (18) QT封装TCP管理类
****** DONE (19) asio实现tcp服务器
****** DONE (20) 实现Token验证和用户数据管理
****** DONE (21) 搭建聊天界面并实现点击按钮
****** DONE (22) 实现搜索框和聊天列表
****** DONE (23) 实现聊天列表动态加载
****** DONE (24) 滚动聊天布局设计
****** DONE (25) 气泡聊天对话框
****** DONE (26) 侧边栏切换和搜索列表
****** DONE (27) EventFilter实现搜索清空和结果显示
****** DONE (28) 实现好友申请界面
****** DONE (29) 好友请界面逻辑讲解
****** DONE (30) QListWidget实现联系人列表
****** DONE (31) 实现好友申请列表
****** DONE (32) 分布式服务设计
****** DONE (33) 实现用户查找功能
****** DONE (34) 申请好友功能和分布式通知
****** DONE (35) 好友通知和加载申请逻辑
****** DONE (36) 好友认证和加载好友
****** DONE (37) 第一季完结
****** DONE (38) 技术难点和面试技巧汇总
****** KILL (39) 文件上传单线程模式
