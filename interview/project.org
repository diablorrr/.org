* 服务端
** GateServer
- 核心 ::
  1. CServer不断接收请求，分配新的HttpConnection来处理请求
  2. HttpConnection做http的请求和回应(使用LogicSystem来做具体的处理get、post)
  3. LogicSystem注册了相关逻辑的回调函数：登录、注册、重置密码、获取验证码
  4. 获取验证码：通过grpc与 *VarifyServer* 通信
  5. 登录：通过grpc与 *StatusServer* 通信，获取负载低的 *ChatServer*(ip、host、token)
- 辅助 ::
  1. AsioIOServicePool用于辅助CServer获取io_context，传入HttpConnection
  2. RedisMgr用于辅助LogicSystem中 注册 重置密码
  3. MysqlMgr用于辅助LogicSystem中 注册 登录 重置密码
- 细节 ::

** StatusServer
- 核心 ::
  1. 创建StatusServiceImpl对象，用于构建并启动grpc服务器，接收请求
  2. StatusServiceImpl返回负载最小的ChatServer的ip、host、token
- 辅助 ::
  1. ConfigMgr为StatusServiceImpl获取ChatServer的配置信息，并存入StatusServiceImpl
  2. RedisMgr缓存查询负载最小ChatServer时的信息：负载最小的服务器、登录的数量
- 细节 ::

** ChatServer
- 核心 ::
  1. 创建ChatServiceImpl对象，用于构建并启动grpc服务器，用于与qt客户端通信
  2. CServer保管很多CSession，用会话id识别
  3. CSession用于读写数据，将读到的数据存放到LogicSystem的消息队列，将要写的数据先放到发送队列
  4. LogicSystem注册了相关逻辑的回调函数：登录、搜索用户、添加好友、认证好友
  5. LogicSystem处理消息队列中的消息，调用相应回调函数
  6. 登录：验证token
- 辅助 ::
  1. ConfigMgr
  2. AsioIOServicePool
  3. RedisMgr
- 细节 ::

** VarifyServer
- 核心 ::
  1. server.js构建grpc服务器，处理认证请求；生成四位id，通过email.js发送邮件
- 辅助 ::
- 细节 ::
* 客户端

* DONE 项目中用到的两种单例模式是如何实现？ [2/2]
实现的都是懒汉式单例模式
1. 一种使用static实现
2. 另一种使用[[id:b7d2806d-6d52-4b5e-a5af-eb3d8ae6915c][crtp]]实现通用的单例模板类，只需要让其他类继承它就能实现单例
** DONE 通过static是如何实现的单例？
构造函数 => 私有
析构函数 => 公有
拷贝构造、拷贝赋值 => 删除
获取单例的函数 => 公有 => 生成静态类对象并返回
#+begin_src cpp
// ConfigMgr类
static ConfigMgr& Inst() {
  static ConfigMgr cfg_mgr;
	return cfg_mgr;
}
#+end_src
** DONE 如何使用crtp实现通用的单例模板类？
- 父类 ::
  构造函数 => 保护[fn:1]
  析构函数 => 公有
  拷贝构造、拷贝赋值 => 删除
  单例对象 => static 私有 (可选：智能指针封装)
  获取单例的函数 => 公有 => 生成单例(once_flag、call_once或static都可以)
- 子类 :: 子类作为父类模板参数的方式继承父类
  构造函数 => 私有
  析构函数 => 共有
  class 父类<子类> => 友元[fn:2]

* DONE io_context底层原理？
io_context是一个事件循环，内部存在任务队列，任务队列中存放着异步操作的回调函数、手动提交的任务；事件循环启动后会处理任务队列中的任务。
* DONE 如何封装的io_context(AsioIOServicePool.cpp)？
AsioIOServicePool(线程池)
每个线程内启动一个[[id:a853063a-5a85-4bc9-8afc-65731a28e27e][事件循环]]([[id:17d4394b-4f3d-479f-a51b-2f821387e81b][io_context]])，处理异步回调和手动提交的任务；为了防止任务队列空的时候，事件循环退出，使用work
* DONE 如何封装的mysql(MysqlMgr.cpp)？
MySqlPool(连接池) => 存储mysql连接 => 起一个线程实现心跳机制 => 保证连接存活
MysqlDao为数据访问层，对MySqlPool进行封装
MysqlMgr为业务访问层，对MysqlDao进行封装
* DONE 如何封装的redis(RedisMgr.cpp)？
RedisConPool(连接池) => 存储redis连接 => 起一个线程实现心跳机制[fn:3] => 保证连接存活
RedisMgr对RedisConPool进行封装，提供对redis操作的接口
* DONE ChatServer的CSession.cpp中为什么将发送的数据先放到发送队列？
这个队列是生产者消费者模型的实现，解耦了生产者和消费者的逻辑、支持多线程并发操作、利用队列的缓冲能力平衡双方速率差异；同时队列先进先出的特点保证了处理消息的顺序
* DONE ChatServer的LogicSystem.cpp中为什么将接收的数据放到消息队列？
这个队列是生产者消费者模型的实现，解耦了生产者和消费者的逻辑、支持多线程并发操作、利用队列的缓冲能力平衡双方速率差异；同时队列先进先出的特点保证了处理消息的顺序
* DONE 如何使用grpc进行数据传输的？
客户端创建channel，再用channel创建stub，使用stub通信
服务端继承Service并实现相应虚函数得到服务；再用ServerBuilder监听端口，并注册服务


* Footnotes

[fn:3] 每隔一定时间，检查所有连接一次
[fn:2] 子类构造函数私有，但父类需要构造子类
[fn:1] 父类调用子类构造，子类构造会调用父类构造；不希望外部直接通过Singleton<T>()实例化
