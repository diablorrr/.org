* python基础
** 名称是什么？[[https://docs.python.org/zh-cn/3.13/tutorial/classes.html#a-word-about-names-and-objects][参考]]
- 对对象的引用(可以重新绑定到不同对象，这点不同于cpp)
** 变量本质是什么？
- 本质是名称
* 类型
** 什么是可变的(mutable)？[[https://docs.python.org/zh-cn/3.13/glossary.html#term-mutable][参考]] 什么是不可变的(immutable)，有哪些？[[https://docs.python.org/zh-cn/3.13/glossary.html#term-immutable][参考]]
- 值可以被改变的对象，且改变前后对象地址一致(通过id()取值)[fn:1]
- 值不能被改变的对象；数字(int、float、complex)、str、tuple
** 什么是可迭代的(iterable)？有哪些？[[https://docs.python.org/zh-cn/3.13/glossary.html#term-iterable][参考]]
- 能逐个返回其内部元素的对象(实现了__iter__()或sequence语义的__getitem__()的对象)
- sequence类型、set类型、mapping类型等
** 什么是可哈希的(hashable)？有哪些？[[https://docs.python.org/zh-cn/3.13/glossary.html#term-hashable][参考]]
- 生命周期内有immutable哈希值、且能与其他对象比较的对象(实现了__hash__()和__eq__()的对象)
- mapping类型
** 什么是序列类型(sequence)？常见操作？有哪些？[[https://docs.python.org/zh-cn/3.13/glossary.html#term-sequence][参考]] [[https://docs.python.org/zh-cn/3.13/tutorial/datastructures.html#comparing-sequences-and-other-types][参考2]]
- 顺序、可重复；是iterable
- 索引、切片、拼接；相同sequence之间可以进行比较
- 基本序列类型：list、tuple、range对象；附加序列类型：str、bytes等
** 什么是集合类型(set)？有哪些？
- 无序、不可重复；是iterable
- set等
** 什么是映射类型(mapping)？有哪些？[[https://docs.python.org/zh-cn/3.13/library/stdtypes.html#typesmapping][参考]]
- 将hashable的值映射到任意对象
- dict
* 数据结构
** 介绍下列表(list)？[[https://docs.python.org/zh-cn/3.13/tutorial/introduction.html#lists][参考]] ？如何实现栈(stack)？如何实现队列(queue)？[[https://docs.python.org/zh-cn/3.13/tutorial/datastructures.html#using-lists-as-stacks][参考]]
- mutable的sequence类型，因此支持索引、切片、拼接；可以存储不同类型的数据
- append()、pop()
- collections.deque包装list；append()、popleft()。原因[fn:2]
** 介绍下列表推导式？[[https://docs.python.org/zh-cn/3.13/tutorial/datastructures.html#list-comprehensions][参考]]
- 将一些操作应用到iterable对象中的每一个元素，生成新的list
- [表达式 for子句... if子句...]        =>       先执行子句，后执行表达式
  + for子句、if子句 :: 可以有多个，输出结果传入表达式计算后得到list
  + 表达式 :: 可以是 复杂表达式、嵌套函数、嵌套列表推导式
** 介绍下元组(tuple)？[[https://docs.python.org/zh-cn/3.13/tutorial/datastructures.html#tuples-and-sequences][参考]]
- immutable的sequence类型，因此支持索引、切片、拼接；可以存储不同类型的数据
** 介绍下集合(set)？[[https://docs.python.org/zh-cn/3.13/tutorial/datastructures.html#sets][参考]]
- mutable的set类型，因此支持索引、切片、拼接；可以存储不同类型的数据
- 支持集合推导式，外层为花括号{}
** 介绍下字典(dict)？[[https://docs.python.org/zh-cn/3.13/tutorial/datastructures.html#dictionaries][参考]] [[https://docs.python.org/zh-cn/3.13/library/stdtypes.html#typesmapping][参考2]]
- key是hashable(意味着immutable、唯一)的；是存储key-value对的集合
- 支持字典推导式，外层为花括号{}
** 打包和解包？支持打包、解包的类型？
- iterable的对象就能解包；打包看情况
- sequence类型
* 控制语句
** if语句？
- if、elif、else
** for语句？[[https://docs.python.org/zh-cn/3.13/tutorial/datastructures.html#looping-techniques][参考]]
- for语句 :: for xxx in iterable对象(可以是以下)
  1. sequence、set、mapping
  2. range()      => 生成等差数列，可以与len()搭配使用
  3. items()      => 提取dict的key、value
  4. enumerate()  => 获取index和对应值
  5. zip()        => 将元素匹配
  6. set()        => 去重(集合构造函数)
- break、continue、else子句 :: 循环结束时进入else语句，若执行for的break则不进入else语句
** for语句的底层实现？[[https://docs.python.org/zh-cn/3.13/tutorial/classes.html#iterators][参考]]
- 对iterable对象调用iter()方法，返回一个定义了__next__方法的iterator，__next__会逐一访问容器中的元素；也能通过next调用__next__方法
** pass语句？[[https://docs.python.org/zh-cn/3.13/reference/simple_stmts.html#pass][参考]]
- 空操作，常用于占位
** match语句？[[https://docs.python.org/zh-cn/3.13/reference/compound_stmts.html#match][参考]] case中的模式有哪些呢？
- match后跟目标值；case后跟模式 用于匹配目标值中的内容
- |(或)、_(通配符[fn:4])、if(提供条件判断[fn:5])、as(捕获子模式[fn:6])
** del语句？[[https://docs.python.org/zh-cn/3.13/tutorial/datastructures.html#the-del-statement][参考]]
- 用于删除条目；可以按索引(sequence)、切片(sequence)、key(mapping)、对象删除
* 函数
** 函数中的局部符号表存储了什么？函数名是什么？查找函数中变量的顺序？[[https://docs.python.org/zh-cn/3.13/tutorial/controlflow.html#defining-functions][参考]]
- 函数参数的名称和值、函数中局部变量的名称和值、嵌套函数名 => 存放在局部符号表中
- 函数名只是一个符号，指向函数对象[fn:7]
- 函数局部符号表 => 外层函数局部符号表 => 全局符号表 => 内置名称符号表
** 函数参数中的位置参数？关键字参数？[[https://docs.python.org/zh-cn/3.13/tutorial/controlflow.html#more-on-defining-functions][参考]]
# def foo(name): ... => 可以传递'ysh'、name='ysh'
- 可以传递值[fn:8]；可以使用特殊参数/限制在/之前只能传递位置参数；任意数量参数*arg[fn:9]，表示接收一个tuple
- 可以传递键值对；可以设置默认值参数(此时也是可选参数)；可以使用特殊参数*限制在*之后只能传递关键字参数；任意参数**kwds，表示接收一个dict
** 函数参数列表如何解包？[[https://docs.python.org/zh-cn/3.13/tutorial/controlflow.html#tut-unpacking-arguments][参考]]
- *解包list、tuple；**解包dict，作为关键字参数传递
* 运算符
** 介绍下in和not in运算符？[[https://docs.python.org/zh-cn/3.13/reference/expressions.html#in][参考]]
- 成员检测运算符[fn:3]，用于确定值是否存在于某个容器中；sequence、set、mapping类型都支持此运算
* 脚本、模块、包
** 什么是脚本？[[https://docs.python.org/zh-cn/3.13/tutorial/modules.html#executing-modules-as-scripts][参考]]
- 作为 *运行入口* 的.py文件，执行if __name__ == "__main__":里的代码(若作为模块导入到其他地方，则不执行此处代码)
- __name__的值为__main__
- 全局命名空间[fn:10]
** 什么是模块？[[https://docs.python.org/zh-cn/3.13/tutorial/modules.html#modules][参考]]
- 作为 *复用单元* 的.py文件，模块中定义了可复用的变量、函数、类等
- __name__的值为模块名(模块名就是函数名)
- 模块的命名空间[fn:11]
** import和 from import 2种导入模块方式之间的区别？与as如何一起使用？[[https://docs.python.org/zh-cn/3.13/tutorial/modules.html#more-on-modules][参考]]
- 区别：
  1. import是将 *模块的名称* 导入到当前命名空间
  2. from import是将 *模块中某个内容的名称* (不会导入模块名称)导入到当前命名空间；若是from xxx import *，则导入模块中所有不以下划线(_)开头的名称。示例[fn:12]
- 与as一起使用：
  1. import：将导入的 *模块的名称* 与as后的名称关联
  2. from import：将导入的 *模块中的某个内容的名称* 和as后的名称关联
** 当导入一个模块时，是如何搜索的？[[https://docs.python.org/zh-cn/3.13/tutorial/modules.html#the-module-search-path][参考]]
- 内置模块(sys.builtin_module_names) => 模块搜索路径(sys.path)(里面包含了标准模块的搜索路径)
** sys.path(模块搜索路径)是如何初始化的？[[https://docs.python.org/zh-cn/3.13/library/sys_path_init.html#sys-path-init][参考]] 可能出现什么问题？[[https://docs.python.org/zh-cn/3.13/tutorial/modules.html#the-module-search-path][参考]]
- 初始化顺序 :: 脚本运行的当前目录 -> PYTHONPATH环境变量 -> site-packages目录(pip安装的第三方库) -> python标准库目录
- 脚本所在目录有与标准库同名的文件，则加载的是脚本所在目录的文件，而不是标准库的
** __pycache__目录的作用？工作原理？[[https://docs.python.org/zh-cn/3.13/tutorial/modules.html#compiled-python-files][参考]]
- 里面缓存着编译好的python文件(文件名：模块.版本.pyc)，用于 *加速加载模块* (没有加速执行速度)
- python会 *对比编译版和源码文件的修改日期* ，编译版过期，自动重新编译；命令行直接加载的模块，每次重新编译，且不会生成编译版
** 什么是包？子包？[[https://docs.python.org/zh-cn/3.13/tutorial/modules.html#packages][参考]]
- 包含__init__.py文件的目录；作为模块的容器，用于组织多个模块或子包
- 包中的存在__init__.py文件的子目录
** __init__.py文件的作用是什么？从包导入*和__all__变量关系？[[https://docs.python.org/zh-cn/3.13/tutorial/modules.html#importing-from-a-package][参考]]
- 让python将一个目录识别为包，可用于包的初始化代码，设置__all__变量等
- 从包导入*时，实际上导入的是__init__.py文件中__all__变量中的模块名列表，若没有定义__all__变量，则不会导入包中的所有模块名称，而只是导入包名；注意[fn:13]
** 介绍下模块的相对导入？介绍下模型的绝对导入？最佳实践？
当包由多个子包构成，则模块的导入方式为：相对导入、绝对导入
- 相对导入，基于当前模块名(从当前模块所在的目录开始)，来导入
- 绝对导入，从最高层级包名开始，来导入
- 若包中的一个模块需要作为python应用程序的主模块，则该主模块的导入语句必须是绝对导入；原因[fn:14]

* 命名空间、作用域
** python中的命名空间是什么？有哪些？[[https://docs.python.org/zh-cn/3.13/glossary.html#term-namespace][参考]] [[https://docs.python.org/zh-cn/3.13/tutorial/classes.html#python-scopes-and-namespaces][参考2]]
- 名称到对象的映射 :: 通过字典对象(__dict__)实现：存放了key-value对，key是名称(变量、函数、类等)，value是对象
- 局部、闭包、全局、内置
** dir()的作用？__dir__的作用？__dict__的作用？__mro__的作用？[[https://docs.python.org/zh-cn/3.13/library/functions.html#dir][参考]] [[https://docs.python.org/zh-cn/3.13/reference/datamodel.html#object.__dir__][参考2]]
- 使用方式：
  + 没有实参 :: 返回当前作用域的名称list
  + 有实参 :: 返回该对象的有效属性list(调用obj的__dir__；若无定义，则从__dict__收集信息，从__mro__收集类及父类的属性和方法)
- 调用dir(obj)时，会调用obj.__dir__()，返回一个iterable对象
- 返回对象中可写名称的dict
- (Method Resolution Order)方法解析顺序，用于查看类的继承链
** python中的作用域是什么？名称查找顺序？[[https://docs.python.org/zh-cn/3.13/tutorial/classes.html#python-scopes-and-namespaces][参考]]
- 命名空间的可见性范围 => 用于控制命名空间的可见性
- LEGB规则：
  1. Local：局部命名空间
  2. Enclosing：闭包命名空间(非局部非全局的空间)
  3. Global：全局命名空间
  4. Built-int：内置命名空间
** nonlocal的作用？global的作用？[[https://docs.python.org/zh-cn/3.13/tutorial/classes.html#scopes-and-namespaces-example][参考]] [[https://docs.python.org/zh-cn/3.13/reference/simple_stmts.html#nonlocal][参考2]] [[https://docs.python.org/zh-cn/3.13/reference/simple_stmts.html#global][参考3]]
- 将名称绑定到 E 中的名称，使得我们能在 L 中读写它；E 中的 *名称不存在，报错*
- 将名称绑定到 G 中的名称，使得我们能在 L、E 中读写它；若 G 中的 *名称不存在，创建*
* 类
** 类的命名空间？类内部名称的查找顺序？
- 类的命名空间独立于前面的LEGB
- 查找顺序
  1. 类命名空间
  2. 父类命名空间
  3. 类定义所在的作用域(通常是G，除非类嵌套在函数中)
** 说一说类成员变量、成员函数有什么特点？
- 有以下特点：
  1. 成员变量：public
  2. 成员函数：virtual
** 说一说实例变量和类变量？[[https://docs.python.org/zh-cn/3.13/tutorial/classes.html#class-and-instance-variables][参考]]
- 实例变量是类的__init__中定义的变量，代表实例所特有的属性；类变量是类中定义的变量，代表类共有的属性
- 补充 :: 相同的名称同时出现在实例和类中，则优先选择实例
** __init__的作用？
- 执行类初始化相关操作(为成员属性赋值)
** type()的作用？__class__的作用？
- 底层调用obj.__class__
- 获取类型(eg：int、str、class、class方法...)
** __doc__的作用？[[https://docs.python.org/zh-cn/3.13/reference/datamodel.html#type.__doc__][参考]]
- 返回类的文档字符串
** isinstance()的作用？issubclass()的作用？[[https://docs.python.org/zh-cn/3.13/tutorial/classes.html#inheritance][参考]]
- 检查一个实例是否为某个类
- 检查某个类是否是另一个类的子类
** python中是如何定义私有变量的？什么是名称改写？[[https://docs.python.org/zh-cn/3.13/tutorial/classes.html#private-variables][参考]]
- 规范是使用_(一个下划线开头)作为私有变量名的前缀，这只是一个约定，python中没有真正的私有变量，推荐替代方式是使用名字改写
- 使用__(两个下划线)作为私有变量名的前缀，python会将其改写为_classname__attribute，实例[fn:16]

** python中数据类是什么？[[https://docs.python.org/zh-cn/3.13/tutorial/classes.html#odds-and-ends][参考]]
- 类似 C专门存放数据的struct；使用装饰器@dataclass自动生成__init__、__repr__等方法
* 迭代器、生成器
** 什么是迭代器(iterator)？什么是迭代器协议？[[https://docs.python.org/zh-cn/3.13/library/stdtypes.html#iterator-types][参考]]
- 实现了迭代器协议的类，用于逐个返回数据
- 实现__iter__(返回自身)、__next__(返回下一个元素或抛出StopIteration)
** 什么是生成器(generator)？什么是生成器表达式？[[https://docs.python.org/zh-cn/3.13/glossary.html#term-generator][参考]] [[https://docs.python.org/zh-cn/3.13/tutorial/classes.html#generator-expressions][参考2]]
- 是iterator的子集，内部有yield语句(自动实现迭代器协议)的函数；用于生成一系列值供for语句、next()使用；通过yield实现 惰性生成值[fn:17]
- 类似列表推导式，但是外层为 *圆括号()而不是方括号[]*，会立即被外层函数所使用







* 官方推荐的编码风格？[[https://docs.python.org/zh-cn/3.13/tutorial/controlflow.html#intermezzo-coding-style][参考]]
1. 类命名：全大写驼峰
2. 函数命名：全小写带下划线
3. 私有变量：使用双下划线(__)生成单下划线的变量




* Footnotes

[fn:1]
#+begin_src python :results output
lst = [1,2,3]
print(id(lst))
lst.append([2])
print(id(lst))
#+end_src

#+RESULTS:
: 139623157909888
: 139623157909888

[fn:2]
列表作为队列效率低：列表尾插入删除快，但列表头插入删除很慢

[fn:3]
x in s => 若x是s的成员，则返回True

[fn:4]
默认匹配，没有匹配的内容就会匹配它

[fn:5]
#+begin_src python
match point:
    case Point(x, y) if x == y:
        print(f"Y=X at {x}")
    case Point(x, y):
        print(f"Not on the diagonal")
#+end_src

[fn:6]
#+begin_src python
case (Point(x1, y1), Point(x2, y2) as p2): ... # 将第二个元素捕获为p2
#+end_src

[fn:7]
因此我们可以创建其他名称指向同一函数对象

[fn:8]
位置参数必须在关键字参数之前

[fn:9]
可以和**kwds组合使用，但是必须在**kwds之前

[fn:10]
脚本中定义了函数func()，则func()在全局命名空间，直接func()调用

[fn:11]
模块mod中定义了函数func()，则func()在模块mod的命名空间，mod.func()调用

[fn:12]
情景1:import mod到全局命名空间，调用mod中的func()函数
mod.func()
情景2:from mod import func到全局命名空间，调用mod中的func()函数
func()

[fn:13]
__all__中有模块名称func，__init__.py中定义了函数func，则从包导入*不会导入func模块，因为函数func的名称覆盖了模块func的名称

[fn:14]
相对导入，基于当前模块名；若当前模块是主模块，则主模块名永远是__main__，那又如何进行相对导入呢？

[fn:15]
str.format() var = 'world'; f'hello {var}'
'hello {var}'.format(var)

[fn:16]
#+begin_src python
class test:
    __name # python将其改写为_test__name；只能通过_test__name来访问它，实现伪私有变量
#+end_src

[fn:17]
值按需生成，而不是一次性全部加载 => 节省内存
