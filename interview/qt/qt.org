* qt事件循环


* 对象树机制


* Q_OBJECT宏展开后有哪些内容？
- 包含以下内容，这些内容的实现在moc生成的cpp文件中
  1. staticMetaObject(成员变量)
  2. metaObject(成员函数)
  3. qt_metacast(成员函数)
  4. qt_metacall(成员函数)
  5. qt_static_metacall(私有成员函数)



* 信号和槽机制原理 [[https://www.cnblogs.com/swarmbees/p/10816139.html][参考]] [[https://zhuanlan.zhihu.com/p/80539605][参考2]]
1. moc在有Q_OBJECT宏的类中查找 signals、slots，收集信号和槽的信息，生成 moc_XXX 文件
2. moc_XXX文件中的 staticMetaObject 对象存储了字符串表[fn:1]、对应索引、qt_static_metacall[fn:2]
3. 调用 connect[fn:3] 时，构造 Connection[fn:4] 对象，存入发送者内存的QObjectConnectionListVector[fn:5] 存储，关联起信号和槽
4. 信号触发(调用emit时)，实际是调用activate函数，传递发送者指针、staticMetaObject、信号索引
5. activate找出当前信号连接的所有槽函数[fn:6]，根据连接类型处理



* connect连接方式有哪几种？如何调用的？
1. (默认) Qt::AutoConnection 自动连接：sender 和 receiver 在同一线程 ? 直连 : 队列连接
2. Qt::DirectConnection 直连 => 直接调用槽函数
3. Qt::QueuedConnection 队列连接 => 调用槽函数 转换为 QMetaCallEvent 事件，放入qt事件循环
4. Qt::BlockingQueuedConnection 阻塞队列连接 => 类似以上，但发送信号的线程会处于阻塞状态(槽函数没处理完时)
5. Qt::UniqueConnection 唯一连接




* Footnotes

[fn:1]
类名、信号/槽名称、参数类型/参数名称

[fn:2]
判断是槽连接时(OMetaObject::invokeMethod)，根据索引调用对应的槽函数或信号

[fn:3]
connect通过staticMetaObject解析信号/槽索引，建立连接

[fn:4]
存储了很多信息，其中有发送者、接收者、信号索引、槽索引、连接类型、qt_static_metacall等

[fn:5]
class QObjectConnectionListVector : public QVector<QObjectPrivate::ConnectionList>
这是一个容器，信号的索引为下标，每个元素是链表，链表存储 Connection对象 (因为一个信号可以被多个槽函数连接)

[fn:6]
通过 QObjectConnectionListVector 获取信号对应的ConnectionList，处理连接(Connection)，判断 connect 连接方式，调用qt_static_metacall调用槽函数或投递事件
