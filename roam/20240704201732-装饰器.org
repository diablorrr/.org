:PROPERTIES:
:ID:       042185e9-0808-43f5-b46c-d994590cad39
:END:
#+title: 装饰器
#+filetags: :python:
* 实现方式
+ 使用以下两者之一 对其他对象（通常是函数或类） 进行封装（装饰）
  - 装饰器函数
  - 装饰器类


* 装饰器函数
** 无参装饰器
#+begin_src python :session :results output
def func(n):
    print("from func(), n is %d!" % (n), flush=True)

def log(func):
    def wrapper(*args, **kwargs):
        ret = func(*args, **kwargs)
        print("功能增强")
        return ret
    return wrapper

func = log(func)
func(0)
#+end_src

#+RESULTS:
: from func(), n is 0!
: 功能增强


语法糖写法：
#+begin_src python :session :results output
@log   # 添加装饰器 log()
def func2(n):
    print("from func2(), n is %d!" % (n), flush=True)

func2(0)

#+end_src

#+RESULTS:
: from func2(), n is 0!
: 功能增强

** 有参装饰器
- 在原装饰器外再封装一层
#+begin_src python :results output
def log(level='debug'):
    def decorator(func):
        def wrapper(*args, **kwargs):
            ret = func(*args, **kwargs)
            if level == 'warning':
                print("warning")
            else:
                print("else")
            return ret
        return wrapper
    return decorator

@log(level="warning") # 添加带参数的装饰器 log()
def func(n):
    print("from func(), n is %d!" % (n), flush=True)

func(0)
#+end_src

#+RESULTS:
: from func(), n is 0!
: warning


* 类方法装饰器
...
