:PROPERTIES:
:ID:       52880cac-b451-4efc-bf87-3edde817eb06
:END:
#+title: git
#+startup: show2levels


* 使用
** git走代理
:PROPERTIES:
:ID:       edf9b6ef-cd6c-4caa-bd2d-dff2131f6efb
:END:
- 注意 :: git不会自动继承系统环境变量([[id:0dfef1fe-1193-4343-9e16-3f95e5edf4dd][linux终端走代理]])，需要单独设置git代理
1. 设置http代理  => git config --global http.proxy "http://127.0.0.1:7890"
2. 设置https代理 => git config --global https.proxy "http://127.0.0.1:7890"
3. 查看是否设置  => git config --global --list
4. 测试http代理  => curl -I http://www.google.com
5. 测试https代理 => curl -I https://www.google.com

** 恢复误删除的分支
1. git reflog
2. git checkout -b <lost-branch> <commit-id>

** 简化历史提交，覆盖[[id:d84f6ea4-d5c2-4ab6-a80f-20e357a183d0][github]]历史记录
*** 方法1(?)
1. git checkout --orphan 分支
2. git add .
3. git commit -m
4. 删除多余分支：git rebase --hard 或 git branch -D
5. 推送远程仓库：git push --force origin main

*** 方法2(有点问题)
1. 创建新分支：git checkout -b 分支名 提交
2. 拣选先前最终提交：git cherry-pick 最终提交
3. 查看冲突文件：git status
4. 解决冲突
5. git add .
6. git cherry-pick --continue
7. 删除多余分支：git rebase --hard 或 git branch -D

** 让本地记录被远程仓库覆盖
1. git fetch
2. git reset --hard origin/main

** git clone github仓库中特定文件夹
- 示例 :: 仅克隆grpc仓库的examples/cpp/helloworld文件夹的内容
#+begin_src bash
# 1. 克隆仓库但不拉取所有内容
git clone --depth=1 --filter=blob:none --no-checkout https://github.com/grpc/grpc.git
cd grpc

# 2. 启用稀疏检出
git sparse-checkout init --cone
git sparse-checkout set examples/cpp/helloworld

# 3. 检出所需文件
git checkout
#+end_src



* 查询
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| 命令            | 参数                                        | 作用                                                               |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| git reset       | --soft                                      | (移动HEAD，同时移动分支)HEAD改变；I和WD不变                        |
|                 | --mixed(默认)                               | HEAD、I改变；WD不变                                                |
|                 | --hard(危险)                                | HEAD、I、WD改变                                                    |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| [[id:dea94665-71ca-4e52-8b7d-919346648bc6][git branch]]      |                                             | 查看本地分支                                                       |
|                 | -r                                          | 查看远程分支                                                       |
|                 | -a                                          | 查看本地、远程分支                                                 |
|                 | -d                                          | 安全删除当前分支及提交                                             |
|                 | -D                                          | 强制(有未合并的更改)也删除                                         |
|                 | -m                                          | 重命名分支                                                         |
|                 | -f (--force)                                | 强制执行操作，即使目标分支存在也会覆盖                             |
|                 | -M                                          | -m和-f的组合[fn:3]                                                 |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| [[id:f29d7899-6359-4abc-907f-d4f4a6928f2d][git clone]]       |                                             |                                                                    |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| git checkout    |                                             | 检查分支                                                           |
|                 | -b <分支> <commit>                          | 新建分支并切换                                                     |
|                 | --orphan                                    | 创建没有历史的新分支                                               |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| [[id:56824225-cc55-48c5-80f7-f1ad0e482bc1][git rebase]]      |                                             | 修改提交历史                                                       |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| git restore     | <文件名>                                    | 撤销工作区未暂存的修改                                             |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| git cherry-pick |                                             | 选择特定提交移到当前分支(无法处理合并提交)                         |
|                 | --abort                                     | cherry-pick产生冲突，撤回                                          |
|                 | --continue                                  | cherry-pick解决冲突，继续                                          |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| git log         |                                             | 查看提交历史                                                       |
|                 | --graph                                     | 图形化显示                                                         |
|                 | --oneline                                   | 一行显示提交                                                       |
|                 | --decorate                                  | 显示分支、标签和HEAD的引用信息                                     |
|                 | --all                                       | 显示所有分支                                                       |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| git reflog      |                                             | 记录本地HEAD的变更，撤销误操作                                     |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| git add         |                                             | 将更改添加到暂存区                                                 |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| [[id:8bebd052-69bc-42ee-b8ed-dd48f3e29bed][git stash]]       |                                             | 将暂存区和工作区的修改保存到一个堆栈，恢复干净状态                 |
|                 | save "注释"                                 | 同上，带注释                                                       |
|                 | list                                        | 查看所有保存的stash记录                                            |
|                 | apply                                       | 恢复最近一次的stash                                                |
|                 | pop                                         | 恢复最近一次的stash(删除对应stash记录)                             |
|                 | drop <stash@{数字}>                         | 删除指定的stash记录                                                |
|                 | clear                                       | 清空所有stash记录                                                  |
|                 | show -p <stash@{数字}>                      | 查看详细的变更内容                                                 |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| [[id:2eb9155c-17e3-4718-b254-70041a1966d1][git commit]]      |                                             | 暂存区修改提交到版本区；生成唯一的提交记录(commit)                 |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| [[id:4e6206ae-df01-4811-8ffe-8c49689169b5][git diff]]        |                                             | 差异：工作区、暂存区                                               |
|                 | --cached/staged                             | 差异：暂存区、最新提交                                             |
|                 | HEAD                                        | 差异：工作区、最新提交                                             |
|                 | <commit1> <commit2>                         | 差异：两个提交                                                     |
|                 | <分支>                                      | 差异：当前分支、其他分支                                           |
|                 | <分支1>..<分支2>                            | 差异：两个分支差异                                                 |
|                 | -- . ':(exclude)<排除的目录或文件>'         | 差异：排除目录或文件                                               |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| git push        |                                             | 正常推送分支                                                       |
|                 | --force(危险)                               | 忽略冲突，覆盖远程分支历史                                         |
|                 | <远程> -d <分支>                            | 删除远程分支                                                       |
|                 | -u <远程仓库名> <分支名>                    | 推送到远程仓库的分支                                               |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| git pull        |                                             | 拉取分支                                                           |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| git merge       |                                             | 合并分支                                                           |
|                 | --abort                                     | merge产生冲突，撤回                                                |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| git fetch       |                                             | 获取最新更新                                                       |
|                 | --prune                                     | 获取最新更新，让分支保持一致                                       |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| git remote      |                                             | 列出远程仓库                                                       |
|                 | -v                                          | 列出远程仓库和URL                                                  |
|                 | add <远程仓库名[fn:1]> <远程仓库地址[fn:2]> | 添加远程仓库                                                       |
|                 | remove <远程仓库名>                         | 删除远程仓库                                                       |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
| [[id:c25f42e9-0361-4966-a1b5-e0f18a4adf45][git submodule]]   |                                             | 允许将一个git仓库作为另一个git仓库的子模块，保持仓库间独立版本控制 |
|-----------------+---------------------------------------------+--------------------------------------------------------------------|
** 配置
|------------------------+--------------------+----------------------------|
| 配置文件               | 作用               | 查询方法                   |
|------------------------+--------------------+----------------------------|
| /etc/gitconfig         | git系统级配置      | git config --system --list |
| ~/.gitconfig           | git用户级配置      | git config --global --list |
| <仓库路径>/.git/config | git仓库级配置      | git config --local --list  |
|------------------------+--------------------+----------------------------|
| [[id:a8270354-11ea-4b5c-ae42-87170cd68368][.gitignore]]             | git忽略文件/文件夹 |                            |
|------------------------+--------------------+----------------------------|


* 概念
- 简介 ::
  1. 用于版本管理
** 三颗树
| 树                    | 用途                                                       |
|-----------------------+------------------------------------------------------------|
| HEAD                  | (总指向该分支最后一次提交)上一次的提交，下一次提交的父节点 |
| Index                 | 预期的下一次提交(暂存区)                                   |
| Working Directory(WD) | 沙盒(工作区)                                               |
Working Directory  --暂存->  Index  --提交->  HEAD
** 分离的HEAD
- 简介 ::
  1. 就是让HEAD 指向具体的提交记录 而不是分支名





* Footnotes
[fn:3] 示例：git branch -M main  --->  含义：将当前分支重命名为main；如果main分支已经存在，强制覆盖它
[fn:2] 示例url：git@github.com:diablorrr/remote_test.git
[fn:1] 默认是origin
