:PROPERTIES:
:ID:       8ab4df56-e11f-42b8-87f8-4daa2fd045db
:END:
#+title: cpp
#+filetags: cpp del

* 调试方法
- [[id:8a46ff3c-7b8e-42e8-a6c9-bdaf55195c4a][gdb]] :: 栈信息 => 一层一层往上看
- 日志 :: 死锁问题
- assert :: 查找内存泄漏问题
- 测试用例 :: 例如多线程队列之类的代码

* C++与shell
** 文件结束符
UNIX系统中是: Ctrl+D
** return与退出状态码
return返回的其实就是 退出状态码（linux与shell编程中一条命令的退出状态码;范围0-255,超出此范围的会取模，0代表成功）
#+begin_src cpp
return 0;
return -1;
#+end_src
** ~符号
~作为用户主目录的缩写只会在shell环境中解析。因此我们在C++中打开文件应该用/home/用户名/...
* 字符串
** 字符串字面量的拼接规则
在C和C++中，相邻的字符串字面量会被 自动拼接 成一个完整的字符串
*** 示例
#+begin_src c++
const char created[] =
    "<html>"
    "<head><title>Created</title></head>"
    "<body><h1>201 Created</h1></body>"
    "</html>";
// 等价于
const char created[] = "<html><head><title>Created</title></head><body><h1>201 Created</h1></body></html>";
#+end_src

* 表达式
** 赋值表达式
*** 赋值表达式的返回值是引用类型
#+begin_src cpp
int a = 3, b = 4;
decltype(a = b) d = a;
#+end_src
d的类型为int &；值为3。
*** 为什么赋值表达式有返回值？为了支持链式表达式
#+begin_src cpp
int a, b;
a = b = 1;
#+end_src
相当于是a = (b = 1)：将b=1的返回值赋给a
*** 为什么不返回值，而返回引用？为了提高效率
#+begin_src cpp
Obj a, b;
a = b = c;
#+end_src
- 若非引用，则b=c的结果是拷贝复制到返回值，再赋给a
- 若为引用，则返回值直接引用b=c的结果

* 数组
** C风格字符串和C风格数组
- 🔥字符串字面量的本质
#+begin_src C++
"hello" //此字符串字面值的本质是const char[]或者说是const char *
list<const char *> ls = {"hello", "world"}; //因此这里只能用const char *，而不能用char *
#+end_src
- C风格字符串的两种等价形式
#+begin_src C++
char str[] = "hello"; //C风格字符串，以\0结尾
char *str = "hello"; //等价形式
{'h', 'e', 'l', 'l', 'o', '\0'} //在内存中的表现
#+end_src
*** 区别
- C风格字符串的长度是隐式的，由'\0'确定
- C风格数组长度是显示声明的，结尾非必须有'\0'
** 指向数组的指针可以用下标运算符访问元素
#+begin_src C++
int arr[10] = {1,2,3,4,5,6,7,8,9,0};
int *p = &arr[2];
int *p1 = arr; //等价于int *p1 = &arr[0];
cout << p[1] << endl; //4，等价于*(p+1)
cout << p1[1] << endl; //2
#+end_src
🤮根源在于：下标运算符返回的是引用
#+begin_src C++
int arr[10] = {1,2,3,4,5,6,7,8,9,0};
int &p = arr[3];
#+end_src

* cpp实现伪闭包效果
** 使用场景
回调函数回调时，保持session不被析构，这样session才能处理回调函数
** 闭包对于变量生命周期的影响
闭包的一点理解：子函数用到了外部的局部变量A，那么子函数内A的生命周期就会延长
示例：子函数里的res生命周期延长，保持和外部函数DeferReturn()同步
#+begin_src go
func DeferReturn() (res int){
    defer func() {
         res++
         log.Println(res)
    }()
    return 0
}
#+end_src
** cpp中的实现
1. 利用智能指针被复制或使用引用计数加一的原理保证内存不被回收
2. bind操作可将值绑定在一个函数对象上生成新的函数对象。若智能指针以值传递的方式绑定到函数对象，那么智能指针的生命周期将和新生成的函数对象一致
   #+begin_src c++
   void CSession::HandleWrite(const boost::system::error_code& error, shared_ptr<CSession> _self_shared) {
    if (!error) {
        std::lock_guard<std::mutex> lock(_send_lock);
        _send_que.pop();
        if (!_send_que.empty()) {
            auto &msgnode = _send_que.front();
            boost::asio::async_write(_socket, boost::asio::buffer(msgnode->_data, msgnode->_max_len),
                std::bind(&CSession::HandleWrite, this, std::placeholders::_1, _self_shared));
        }
    }
    else {
        std::cout << "handle write failed, error is " << error.what() << endl;
        _server->ClearSession(_uuid);
    }
  }
   #+end_src
  上述示例中，_self_shared的生命周期与bind新生成的函数(回调函数)保持一致，也就是CSession和回调函数生命周期保持一致
** 使用伪闭包的注意事项
# Session和回调函数的生命周期保持一致 => 获取Session的指针 => 该指针在Session内部使用 => 不能使用两个智能指针共同管理Session => 引用计数不同步
- 错误示例 ::
  shared_ptr<CSession>(this)生成了新的智能指针，与其他管理this的智能指针引用计数不同步
  #+begin_src c++
  void CSession::Start(){
      memset(_data, 0, MAX_LENGTH);
      _socket.async_read_some(boost::asio::buffer(_data, MAX_LENGTH), std::bind(&CSession::HandleRead, this,
          std::placeholders::_1, std::placeholders::_2, shared_ptr<CSession>(this)));
  }
  #+end_src
- 正确示例 ::
  使用enable_shared_from_this和shared_from_this()共享与其他基于this的智能指针的引用计数
  #+begin_src c++
  void CSession::Start(){
      memset(_data, 0, MAX_LENGTH);
      _socket.async_read_some(boost::asio::buffer(_data, MAX_LENGTH), std::bind(&CSession::HandleRead, this,
          std::placeholders::_1, std::placeholders::_2, shared_from_this()));
  }
  #+end_src
