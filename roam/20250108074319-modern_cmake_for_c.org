:PROPERTIES:
:ID:       cca52d5b-d76d-4411-8605-af9499019274
:NOTER_DOCUMENT: /home/yoshiki01/Documents/Modern-CMake-for-C++.pdf
:NOTER_PAGE: 301
:END:
#+title: Modern CMake for C++


* 第1章 初识CMake
:PROPERTIES:
:NOTER_PAGE: 13
:END:
** CMake项目的结构
:PROPERTIES:
:NOTER_PAGE: 34
:END:
*** 源码树
这是项目所在的目录 (也称为项目根目录)，包含了所有的 C++ 源码和 CMake 项目文件
*** 构建树
CMake使用这个目录来存储构建过程中生成的所有内容:项目的构件、配置、缓存、构建日志，以及本地构建工具将创建的文件。
*** 文件列表
包含CMake语言的文件称为文件列表，可以通过使用include()和find_package()，或间接使用add_subdirectory() 来将其包含在另一个文件中
*** CMakeLists.txt
CMake项目配置为CMakeLists.txt列表文件，需要在源码树根部提供。这样的顶层文件是在配置阶段首先执行的。
*** CMakeCache.txt
当配置阶段第一次运行时，缓存变量将从列表文件中生成并存储在 CMakeCache.txt 中。该文件位于构建树的根目录中
*** 包配置文件
CMake生态系统包括项目可以依赖的外部包，允许开发人员以无缝的、跨平台的方式使用库和工具
- 使用 find_package() 指令来包含包
- 描述包的CMake文件命名为<PackageName>-config.cmake和<PackageName>Config.cmake
*** cmake_install.cmake，CTestTestfile.cmake和CPackConfig.cmake
这些文件是由生成阶段的cmake可执行文件在构建树中生成的，不应该通过手动编辑。CMake使用它们作为CMake安装操作、CTest 和 CPack 的配置
*** CMakePresets.json 和 CMakeUserPresets.json
预设项目的配置
- CMakePresets.json: 项目作者提供的预设。
- CMakeUserPresets.json:根据自己的偏好定制项目配置用户准备的
* 第2章 CMake语法
:PROPERTIES:
:NOTER_PAGE: 44
:END:
** 控制结构
:PROPERTIES:
:NOTER_PAGE: 57
:END:
*** 条件块
:PROPERTIES:
:NOTER_PAGE: 57
:END:
**** if
#+begin_src cmake
if(<condition>)
  <commands>
elseif(<condition>) # optional block, can be repeated
  <commands>
else() # optional block
  <commands>
endif()
#+end_src
*** 循环
:PROPERTIES:
:NOTER_PAGE: 60
:END:
**** while
#+begin_src cmake
while(<condition>)
  <commands>
endwhile()
#+end_src
**** foreach
*** 定义指令
:PROPERTIES:
:NOTER_PAGE: 62
:END:
两种方式定义自己的命令
1. macro()
2. function()
**** 命令调用中的参数
:PROPERTIES:
:ID:       93646e86-6a6a-473c-b4f2-d188d195bffd
:END:
- ${ARGC}: 参数的数量
- ${ARGV}: 所有参数的列表
- ${ARG0}, ${ARG1}, ${ARG2}: 特定索引处的实参值
- ${ARGN}: 最后一个预期参数之后，由调用者传递的匿名参数列表
**** macro()
工作方式更像查找和替换指令
不会在调用堆栈上创建单独的条目
因此宏中调用return()比在函数上返回调用语句的级别高一级
***** 语法
#+begin_src cmake
macro(<name> [<argument> …])
  <commands>
endmacro()
#+end_src
**** function()
为本地变量创建一个单独的作用域
***** 语法
#+begin_src cmake
function(<name> [<argument> …])
  <commands>
endfunction()
#+end_src
***** 细节
若函数调用传递的参数多于声明的参数，多余的参数将解释为匿名参数并存储在 [[id:93646e86-6a6a-473c-b4f2-d188d195bffd][ARGN]] 变量中。
* 第3章 CMake项目
** 指令和命令
** 项目结构 :ATTACH:
:PROPERTIES:
:NOTER_PAGE: 77
:ID:       48c9ca4c-dfff-4656-a1d8-fb464c82e3db
:END:
*** 项目目录结构示例
[[attachment:_20250113_160351screenshot.png]]
组件：
- cmake: 宏和函数，查找模块和一次性脚本
- src: 将存储的二进制文件和库的源代码
- doc: 用于构建文档
- extern: 从源代码构建的外部项目的配置
- test: 包含自动测试的代码
# 此结构中CMakeLists.txt应该存在于以下目录中：顶级项目目录、src、doc、extern、test
**** 可执行文件目录结构
[[attachment:_20250113_160906screenshot.png]]
**** 库的目录结构 :ATTACH:
:PROPERTIES:
:ID:       19008964-34c6-403b-bc1d-4900bade9042
:END:
[[attachment:_20250113_161101screenshot.png]]

* 第4章 使用目标
:PROPERTIES:
:NOTER_PAGE: 91
:END:
** 目标的概念
- 定义 :: 构建系统用来将文件列表编译为另一个文件的一个方式
*** 创建目标的指令
- add_executable()
- add_library()
- add_custom_target()
*** 依赖图 :ATTACH:
:PROPERTIES:
:ID:       17b918fd-05e8-4150-83cb-d77564a83968
:END:
[[attachment:_20250113_172302screenshot.png]]
target_link_libraries()
add_dependencies()
** 生成器表达式
:PROPERTIES:
:NOTER_PAGE: 104
:END:
*** 问题
一个目标需要知道另一个目标的二进制工件的路径。但是，只有在解析所有列表文件并完成配置阶段之后，这些信息才可用
*** 解决
生成器表达式：为该信息创建一个占位符，并将其评估推迟到下一个阶段——生成阶段
# $<>(生成器表达式)在生成阶段展开，${}(变量)在配置阶段展开
*** 语法 :ATTACH:
:PROPERTIES:
:ID:       1c202218-ce00-415a-8865-8bdd063680ff
:END:
[[attachment:_20250114_213503screenshot.png]]
- 以 $ 和括号 ($<) 开头
- 添加 EXPRESSION 名称
- 若表达式需要参数，则添加冒号 (:) 并提供 arg1、arg2 和 arg3 值，用逗号分隔。
- 用 > 关闭表达式。
*** 条件表达式
*** 计算类型
:PROPERTIES:
:NOTER_PAGE: 106
:END:
生成器表达式可以计算成两种类型——布尔或字符串。布尔值由 1(真) 和 0(假) 表示。其他的都只是一个字符串。
*** 用法
:PROPERTIES:
:NOTER_PAGE: 113
:END:

* 第5章 CMake编译C++
:PROPERTIES:
:NOTER_PAGE: 118
:END:
** 编译基础
:PROPERTIES:
:NOTER_PAGE: 118
:END:
创建和运行C++程序的步骤
1. 编写：编写源码。
2. 编译：将.cpp编译为目标文件。
3. 链接：将目标文件链接到一个可执行文件中，并添加所有其他依赖项——动态库和静态库。
4. 加载：为了运行该程序，操作系统将使用一个名为加载器的工具，将其机器码和所有必需的动态库映射到虚拟内存。然后加载器读取头文件以检查程序从哪里开始，并将控制权移交给代码。
5. 执行：C++ 运行时启动。执行一个 special_start 函数来收集命令行参数和环境变量。启动线程，初始化静态符号，并注册清理回调。这样，才能调用 main()(其中代码由开发者书写)。
** 预处理
*** 提供包含头文件的路径
:PROPERTIES:
:NOTER_PAGE: 122
:END:
#include指令包含头文件形式：
- #include <path-spec>: 尖括号式
- #include ”path-spec”: 引号式
预处理器将用指定路径中的文件内容替换这些指令
尖括号形式将检查标准包含目录，包括标准 C++ 库和标准 C 库头文件存储在系统中的目录
引号式将开始在当前文件的目录中搜索包含的文件，然后在目录中查找带尖括号的目录

CMake 提供了一个指令来操作头文件的搜索路径，以找到需要包含的头文件
target_include_directories()指令
* 第6章 进行链接
** 掌握正确的链接方式 :ATTACH:
:PROPERTIES:
:NOTER_PAGE: 141
:ID:       d173256c-6118-41c6-8dab-e426e6f9d7b3
:END:
[[attachment:_20250115_134907screenshot.png]]
- ELF 头标识目标操作系统、ELF 文件类型、目标指令集体系结构，以及 ELF 文件中两个头表的位置和大小信息——程序头表 (不存在于目标文件中) 和节头表
- 包含按类型分组的信息的部分
  + .text 区段: 机器代码，包含处理器要执行的所有指令
  + .data 区段: 初始化的全局对象和静态对象 (变量) 的所有值
  + .bss 区段: 未初始化的全局对象和静态对象 (变量) 的所有值，这些值将在程序启动时初始化为零
  + .rodata 区段: 常量的所有值 (只读数据)
  + .strtab 区段: 一个字符串表，包含所有常量字符串，例如 hello.cpp 示例中的 Hello World
  + .shstrtab 区段: 包含所有部分名称的字符串表
- 节头表，包含关于名称、类型、标志、内存中的目标地址、文件中的偏移量和其他杂项信息，用于了解文件中的哪些部分，以及它们在哪里，就像目录一样

 [[attachment:_20250115_135214screenshot.png]]

链接器解析引用
[[attachment:_20250115_145521screenshot.png]]

最终的可执行文件
[[attachment:_20250115_145619screenshot.png]]

** 链接顺序和未定义符号
:PROPERTIES:
:NOTER_PAGE: 150
:END:
解析未定义符号的工作方式
链接器从左向右处理二进制文件。当链接器遍历二进制文件时，将执行以下操作
1. 收集从此二进制文件导出的所有未定义符号，并存储起来以备以后使用
2. 尝试用此二进制文件中定义的符号解析未定义的符号 (从处理的二进制文件中收集)
3. 对下一个二进制文件重复此过程
若在整个操作完成后，若有符号仍未定义，则链接失败

* 第9章 分析工具
:PROPERTIES:
:NOTER_PAGE: 211
:END:
** 静态检查
:PROPERTIES:
:NOTER_PAGE: 215
:END:
静态程序分析是在不运行编译版本的情况下检查源代码的过程
Cppcheck在手册中推荐以下步骤：
1. 找到静态检查器的可执行文件
2. 生成一个编译数据库
   cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .
3. 生成的 JSON 文件上运行检查器
   <path-to-cppcheck> --project=compile_commands.json
