:PROPERTIES:
:ID:       7aba6e6e-befd-4f19-bb97-9c3ac059f897
:END:
#+title: asio
#+LAST_MODIFIED: 2025-03-03 19:12:28



当客户端中断或关闭连接时，TCP 协议栈会触发一个读就绪事件，表示客户端的连接已经被关闭。

boost::asio::io_context::work 是一个用于管理 io_context 的对象，它的主要作用是防止 io_context 在没有待处理的异步操作时退出。

在网络编程中，io_context 和 socket 是常见的概念，它们的关系可以理解为 任务调度器和 I/O 操作实体之间的协作。


* io_context工作流程
1. socket 产生事件：
网络通信过程中，socket 触发事件（如数据可读、可写、连接建立等）。

2. 事件注册到 io_context：
用户通过异步操作（如 async_read、async_write）将事件和对应的回调函数注册到 io_context。

3. io_context 添加任务到任务队列：
io_context 将这些事件的处理任务（包括回调函数）加入其内部的任务队列。

4. 线程从任务队列中取任务：
调用 io_context.run() 的线程从任务队列中取出任务准备执行。多个线程可协作处理任务队列中的任务。

5. 线程执行回调函数处理事件：
线程执行与事件关联的回调函数，完成任务的具体逻辑（如数据读取、响应发送）。


* io_context的关键组件
1. 任务队列（Task Queue）
存储异步操作（如 async_read、async_write 等）的回调函数和相关任务。
线程通过 io_context.run() 从任务队列中取任务并执行。
2. 事件循环（Event Loop）
io_context.run() 进入事件循环，持续检查并执行任务队列中的任务，直到任务队列为空。
3. strand
strand 用于确保异步操作的回调函数按顺序执行，避免并发执行时的竞态条件。
它是 executor 的一个实现，提供了一种串行化的执行机制。
4. work
为防止 io_context 提前退出（即没有任务可以处理时），可以通过 boost::asio::io_context::work 对象来保持 io_context 处于活动状态，直到显式调用 io_context.stop()。
5. service
io_context 通过其服务（service）来管理具体的操作，如定时器、套接字等。服务通常是 io_context 的一部分，负责实现具体的异步任务。
6. execution_context
io_context 继承自 execution_context，为其提供了执行异步操作的环境。它提供了一些调度和执行相关的功能。

总结：
io_context 是异步操作的核心，包含：

任务队列：存储待执行任务。
事件循环：通过 run() 执行任务。
strand：保证顺序执行某些任务。
work：保持 io_context 活动。
服务和执行上下文：管理和调度异步操作。
