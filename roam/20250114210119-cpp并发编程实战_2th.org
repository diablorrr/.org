:PROPERTIES:
:ID:       4d3a936f-b080-4f03-b6ae-8b8eaf48c373
:NOTER_DOCUMENT: /home/yoshiki01/Documents/C++并发编程实战（第2版） ([英] 安东尼·威廉姆斯) (Z-Library).pdf
:NOTER_PAGE: 30
:END:
#+FILETAGS: book cpp
#+title: cpp并发编程实战 2th
#+LAST_MODIFIED: 2025-01-15 20:26:10

* 第1章 你好，C++并发世界
** 1.1 什么是并发
:PROPERTIES:
:NOTER_PAGE: (23 . 0.317705)
:END:
** 1.2 为什么使用并发技术
:PROPERTIES:
:NOTER_PAGE: (27 . 0.186951)
:END:
** 1.3 并发与C++多线程
:PROPERTIES:
:NOTER_PAGE: (30 . 0.1631)
:END:
** 1.4 启程上路
:PROPERTIES:
:NOTER_PAGE: (33 . 0.289177)
:END:
** 1.5 小结
:PROPERTIES:
:NOTER_PAGE: (34 . 0.40522)
:END:
* 第2章 线程管控
:PROPERTIES:
:NOTER_PAGE: (36 . 0.082263)
:END:
** 2.1 线程的基本管控
:PROPERTIES:
:NOTER_PAGE: (36 . 0.265335)
:END:
** 2.2 向线程函数传递参数
:PROPERTIES:
:NOTER_PAGE: (44 . 0.226216)
:END:
** 2.3 移交线程归属权
:PROPERTIES:
:NOTER_PAGE: (47 . 0.253341)
:END:
** 2.4 在运行时选择线程数量
:PROPERTIES:
:NOTER_PAGE: (51 . 0.340074)
:END:
** 2.5 识别线程
:PROPERTIES:
:NOTER_PAGE: (54 . 0.366335)
:END:
** 2.6 小结
:PROPERTIES:
:NOTER_PAGE: (56 . 0.076755)
:END:
* 第3章 在线程间共享数据
:PROPERTIES:
:NOTER_PAGE: (57 . 0.094034)
:END:
** 3.1 线程间共享数据的问题
:PROPERTIES:
:NOTER_PAGE: (58 . 0.160527)
:END:
** 3.2 用互斥保护共享数据
:PROPERTIES:
:NOTER_PAGE: (61 . 0.21177)
:END:
*** 3.2.1 在C++中使用互斥
:PROPERTIES:
:NOTER_PAGE: (61 . 0.411531)
:END:
*** 3.2.2 组织和编排代码以保护共享数据
:PROPERTIES:
:NOTER_PAGE: (63 . 0.096607)
:END:
*** 3.2.3 发现接口固有的条件竞争
:PROPERTIES:
:NOTER_PAGE: (64 . 0.30797)
:END:
*** 3.2.4 死锁：问题和解决方法
:PROPERTIES:
:NOTER_PAGE: (71 . 0.278357)
:END:
*** 3.2.5 防范死锁的补充准则
:PROPERTIES:
:NOTER_PAGE: (73 . 0.2861)
:END:
*** 3.2.6 运用std::unique_lock<>灵活加锁
:PROPERTIES:
:NOTER_PAGE: (80 . 0.126045)
:END:
*** 3.2.7 在不同作用于之间转移互斥归属权
:PROPERTIES:
:NOTER_PAGE: (81 . 0.381882)
:END:
*** 3.2.8 按适合的粒度加锁
:PROPERTIES:
:NOTER_PAGE: (82 . 0.374557)
:END:
** 3.3 保护共享数据的其他工具
:PROPERTIES:
:NOTER_PAGE: 84
:END:
*** 3.3.1 在初始化过程中保护共享数据
:PROPERTIES:
:NOTER_PAGE: (85 . 0.125022)
:END:
*** 3.3.2 保护甚少更新的数据结构
:PROPERTIES:
:NOTER_PAGE: (88 . 0.425686)
:END:
*** 3.3.3 递归加锁
:PROPERTIES:
:NOTER_PAGE: (90 . 0.360288)
:END:
** 3.4 小结
:PROPERTIES:
:NOTER_PAGE: (91 . 0.172503)
:END:
* 第4章 并发操作的同步
:PROPERTIES:
:NOTER_PAGE: (92 . 0.084522)
:END:
** 4.1 等待事件或等待其他条件
:PROPERTIES:
:NOTER_PAGE: (92 . 0.407912)
:END:
*** 4.1.2 利用条件变量构建线程安全的队列
:PROPERTIES:
:NOTER_PAGE: (96 . 0.40148)
:END:
** 4.2 使用future等待一次性事件的发生
:PROPERTIES:
:NOTER_PAGE: (101 . 0.321189)
:END:
*** 4.2.1 从后台任务返回值
:PROPERTIES:
:NOTER_PAGE: (102 . 0.288478)
:END:
*** 4.2.2 关联future实例和任务
:PROPERTIES:
:NOTER_PAGE: (104 . 0.646964)
:END:
*** 4.2.3 创建std::promise
:PROPERTIES:
:NOTER_PAGE: (107 . 0.381691)
:END:
*** 4.2.4 将异常保存到future
:PROPERTIES:
:NOTER_PAGE: (109 . 0.241383)
:END:
*** 4.2.5 多个线程一起等待
:PROPERTIES:
:NOTER_PAGE: (110 . 0.358146)
:END:
** 4.3 限时等待
:PROPERTIES:
:NOTER_PAGE: (113 . 0.235438)
:END:
*** 4.3.1 时钟类
:PROPERTIES:
:NOTER_PAGE: (113 . 0.494652)
:END:
*** 4.3.2 时长类
:PROPERTIES:
:NOTER_PAGE: (114 . 0.40214)
:END:
*** 4.3.3 时间点类
:PROPERTIES:
:NOTER_PAGE: (116 . 0.286641)
:END:
*** 4.3.4 接受超时时间的函数
:PROPERTIES:
:NOTER_PAGE: (118 . 0.296079)
:END:
** 4.4 运用同步操作简化代码
:PROPERTIES:
:NOTER_PAGE: (120 . 0.080973)
:END:
*** 4.4.1 利用future进行函数式编程
:PROPERTIES:
:NOTER_PAGE: (120 . 0.255765)
:END:
*** 4.4.2 使用消息传递进行同步
:PROPERTIES:
:NOTER_PAGE: (125 . 0.172673)
:END:
*** 4.4.3 符合并发技术规约的后续风格并发
:PROPERTIES:
:NOTER_PAGE: (129 . 0.473249)
:END:
*** 4.4.4 后续函数的连锁调用
:PROPERTIES:
:NOTER_PAGE: (131 . 0.339862)
:END:
*** 4.4.5 等待多个future
:PROPERTIES:
:NOTER_PAGE: (134 . 0.340839)
:END:
*** 4.4.6 运用std::experimental::when_any()函数等待多个future，直到其中之一准备就绪
:PROPERTIES:
:NOTER_PAGE: (136 . 0.325866)
:END:
*** 4.4.7 线程闩和线程卡——并发技术规约提出的新特性
:PROPERTIES:
:NOTER_PAGE: (139 . 0.302025)
:END:
*** 4.4.8 基本的线程闩类std::experimental::latch
:PROPERTIES:
:NOTER_PAGE: (140 . 0.293774)
:END:
*** 4.4.9 基本的线程卡类std::experimental::barrier
:PROPERTIES:
:NOTER_PAGE: (141 . 0.361477)
:END:
*** 4.4.10 std::experimental::flex_barrier——std::experimental::barrier的灵活版本
:PROPERTIES:
:NOTER_PAGE: (143 . 0.271109)
:END:
** 4.5 小结
:PROPERTIES:
:NOTER_PAGE: (144 . 0.312971)
:END:
* 第5章 C++内存模型和原子操作
:PROPERTIES:
:NOTER_PAGE: (146 . 0.097665)
:END:
** 5.1 内存模型基础
:PROPERTIES:
:NOTER_PAGE: (147 . 0.214685)
:END:
** 5.2 C++中的原子操作机器类别
:PROPERTIES:
:NOTER_PAGE: (150 . 0.137935)
:END:
** 5.3 同步操作和强制次序
:PROPERTIES:
:NOTER_PAGE: (164 . 0.506075)
:END:
** 5.4 小结
:PROPERTIES:
:NOTER_PAGE: (194 . 0.350238)
:END:
* 第6章 设计基于锁的并发数据结构
:PROPERTIES:
:NOTER_PAGE: (196 . 0.072537)
:END:
* 第7章 设计无锁数据结构
:PROPERTIES:
:NOTER_PAGE: (228 . 0.10702)
:END:
* 第8章 设计并发代码
:PROPERTIES:
:NOTER_PAGE: (276 . 0.09163)
:END:
* 第9章 高级线程管理
:PROPERTIES:
:NOTER_PAGE: (325 . 0.122337)
:END:
* 第10章 并行算法函数
:PROPERTIES:
:NOTER_PAGE: (352 . 0.097601)
:END:
* 第11章 多线程应用的测试和除错
:PROPERTIES:
:NOTER_PAGE: (364 . 0.11898)
:END:
* 附录A C++11精要：部分语言特性
:PROPERTIES:
:NOTER_PAGE: (378 . 0.192681)
:END:
** A.1 右值引用
:PROPERTIES:
:NOTER_PAGE: (378 . 0.659951)
:END:
* 附录B 各并发程序库的简要对比
:PROPERTIES:
:NOTER_PAGE: (408 . 0.154645)
:END:
* 附录C 消息传递程序库和完整的自动柜员机范例
:PROPERTIES:
:NOTER_PAGE: (410 . 0.158216)
:END:
