:PROPERTIES:
:ID:       819c9ef5-5220-4678-994a-3122d7d17ab7
:END:
#+title: 初始化
#+filetags: cpp

* 初始化
:PROPERTIES:
:NOTER_PAGE: 65
:ID:       cbf04b45-0bd7-4bb8-91e8-62788c109fd5
:END:
- 注意 :: 初始化 和 赋值 不是一个概念
  + 初始化 :: 创建变量时赋予其一个初始值
  + 赋值 :: 擦除对象当前值，用一个新值替代
** 默认初始化[fn:5]
:PROPERTIES:
:ID:       fb6aa438-3fcc-4ed1-bd7d-7cda9344aa8d
:END:
- 简介 :: 没有指定变量初始值时
- 实现 ::
  + 内置类型 ::
    1. 全局变量(函数体外)：初始化为0
    2. 局部变量(函数体内)：不被初始化 => 值是未定义的
  + 类类型 ::
    (先)默认构造函数，(后)合成的默认的构造函数
    1. 默认构造函数
    2. 合成的默认构造函数：
       - 内置类型成员 :: 同内置类型初始化规则
       - 类类型成员 :: 同类类型初始化规则
  + 数组 ::
    1. 内置类型数组：同内置类型初始化规则
    2. 类类型数组：同类类型初始化规则
** 值初始化
:PROPERTIES:
:NOTER_PAGE: 114
:END:
- 容器(数组、vector等) :: 提供的初始值数量少于数组大小，剩下的元素会进行值初始化
- 局部静态变量 :: 不初始化时
- T()表达式 :: 显式地请求值初始化时
** 直接初始化
- 简介 ::
  + 内置类型 :: 不使用=初始化一个变量
  + 类类型 :: 类的构造函数
- 特点 :: 可以提供多个相同的初始值
** 拷贝初始化
- 简介 ::
  + 内置类型 :: 使用=初始化一个变量
  + 类类型 :: 类的拷贝构造函数
- 特点 :: 只能提供一个初始值
** 列表初始化
:PROPERTIES:
:NOTER_PAGE: 66
:ID:       ac8ad834-52c3-4fec-84fd-b000adce344f
:END:
- 简介 ::
  1. 使用元素值列表(花括号的形式)初始化
  2. 可和 直接初始化、拷贝初始化搭配使用
- 特点 :: 可以提供多个不同的初始值
- 场景 ::
  1. 容器赋值
  2. 类数据成员赋值
- 注意 ::
  + 内置类型 :: 存在精度丢失的话，编译器会报错
** 示例
#+begin_src c++
int a = 0; // 拷贝初始化
int a(0); // 直接初始化
vector<string> svec(10, "hi"); // 多个相同值的直接初始化

// 列表初始化
int a = {0}; // 拷贝初始化
int a{0}; // 直接初始化
vector<string> v1{"a", "an", "the"}; // 使用元素值列表初始化

// 精度丢失，编译器报错
long double ld = 3.1415926;
int a{ld}, b= {ld}; // 错误
int c(ld), d = ld; // 正确

#+end_src
