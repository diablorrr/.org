:PROPERTIES:
:ID:       bee683d2-eec4-45a8-af02-be369d182e8d
:END:
#+title: auto
#+filetags: cpp

* auto [[https://www.learncpp.com/cpp-tutorial/type-deduction-for-objects-using-the-auto-keyword/][learncpp10.8]] [[https://www.learncpp.com/cpp-tutorial/type-deduction-for-functions/][learncpp10.9]] [[https://www.learncpp.com/cpp-tutorial/type-deduction-with-pointers-references-and-const/][learncpp12.14]]
1. 用于 *自动类型推导* ，根据 value 来推断 type；推断 表达式类型 时， *会执行表达式*

2. auto 与 *const/constexpr、引用*
   a. *[[id:1f3d6196-77e0-47a7-95e3-fb61a399ee2b][顶层const]]、引用* ：会被丢弃 ；若要保留，重新用 const 和 引用 修饰
   b. *[[id:b06260e2-ed7a-4b12-8e9d-b07a3e564a75][constexpr]]* ：含有隐式的 const ，const 会被丢弃 ；若要保留，重新用 constexpr 修饰
      #+begin_src cpp :results output :namespaces std :includes <iostream>
      constexpr double a { 3.4 };  // const double (constexpr not part of type, const is implicit)

      auto b { a };                // double (const dropped)
      const auto c { a };          // const double (const dropped but reapplied)
      constexpr auto d { a };      // const double (const dropped but implicitly reapplied by constexpr)
      #+end_src
   c. *const引用* ： =const和引用= 都会被丢弃；若用 =auto&= 推导，则 推导类型为 =const auto&=
      #+begin_src cpp :results output :namespaces std :includes <iostream>
      const std::string& getConstRef(); // some function that returns a reference to const

      int main()
      {
          auto ref1{ getConstRef() }; // std::string (引用丢弃 -> 底层const 变 顶层const -> 丢弃 顶层const)
          auto& ref2{ getConstRef() }; // const std::string& (添加了引用，因此 底层const 没有变成 顶层const -> 底层const 没有被丢弃)
      }
      #+end_src
   d. *constexpr引用*
      #+begin_src cpp :results output :namespaces std :includes <iostream>
      constexpr std::string_view hello { "Hello" };   // implicitly const

      constexpr const std::string_view& getConstRef() // function is constexpr, return const std::string_view&
      {
          return hello;
      }

      int main()
      {
          constexpr auto ref2{ getConstRef() };        // constexpr const std::string_view (reference dropped and top-level const dropped, constexpr applied, implicitly const)
          constexpr const auto& ref4{ getConstRef() }; // constexpr const std::string_view& (reference reapplied, low-level const not dropped, constexpr applied)
      }
      #+end_src

3. auto 与 *函数*
   a. 用于 *后置返回类型语法* ：此时 auto 不进行类型推导，只是后置返回类型语法的一部分 [fn:1]
   b. 不能用于推导函数参数 [fn:2]
   c. cpp14 用于 *函数返回类型推导* [fn:3]； auto 返回类型的函数 *使用前必须完全定义* [fn:4]     ->    *Best Practice* ：优先使用 显式返回类型，而非 返回类型推导

4. auto 与 *指针*
   a. 不会被丢弃，但可以显示表达推导的类型是指针
      #+begin_src cpp :results output :namespaces std :includes <iostream>
      std::string* getPtr(); // some function that returns a pointer

      int main()
      {
          auto ptr1{ getPtr() };  // std::string*
          auto* ptr2{ getPtr() }; // std::string*
      }
      #+end_src

5. auto 与 *[[id:27733720-d27e-4852-bb07-b50130457fc9][字面量]]*
   a. 字符串字面量的类型推导为 =const char *= ，使用 字面量后缀 改变推导结果
      #+begin_src cpp :results output :namespaces std :includes <iostream>
      #include <string>
      #include <string_view>

      int main()
      {
          using namespace std::literals; // easiest way to access the s and sv suffixes

          auto s0 { "haha" };  // 推导为 const char*
          auto s1 { "goo"s };  // "goo"s is a std::string literal, so s1 will be deduced as a std::string
          auto s2 { "moo"sv }; // "moo"sv is a std::string_view literal, so s2 will be deduced as a std::string_view

          return 0;
      }
      #+end_src


* Footnotes

[fn:1]
#+begin_src cpp :results output :namespaces std :includes <iostream>
#include <type_traits> // for std::common_type

std::common_type_t<int, double> compare(int, double);         // harder to read (where is the name of the function in this mess?)
auto compare(int, double) -> std::common_type_t<int, double>; // 易读 (we don't have to read the return type unless we care)

// 对齐函数名 -> 易读
auto add(int x, int y) -> int;
auto divide(double x, double y) -> double;
auto printSomething() -> void;
auto generateSubstring(const std::string &s, int start, int len) -> std::string;
#+end_src

[fn:2]
结果无法编译
#+begin_src cpp :results output :namespaces std :includes <iostream>
void addAndPrint(auto x, auto y)
{
    std::cout << x + y << '\n';
}

int main()
{
    addAndPrint(2, 3); // case 1: call addAndPrint with int parameters
    addAndPrint(4.5, 6.7); // case 2: call addAndPrint with double parameters

    return 0;
}
#+end_src

[fn:3]
#+begin_src cpp :results output :namespaces std :includes <iostream>
// let compiler determine the return type of unsigned short + char
auto add(unsigned short x, char y) -> 
{
    return x + y;
}
#+end_src

#+RESULTS:

[fn:4]
编译错误
#+begin_src cpp :results output :namespaces std :includes <iostream>
auto foo();

int main()
{
    std::cout << foo() << '\n'; // the compiler has only seen a forward declaration at this point

    return 0;
}

auto foo()
{
    return 5;
}
#+end_src
