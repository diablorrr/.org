:PROPERTIES:
:ID:       1450514f-880d-42f5-8bb4-f114c1a5b675
:NOTER_DOCUMENT: /home/yoshiki01/Documents/C++ Primer 5th.pdf
:NOTER_PAGE: 81
:END:
#+title: const
#+filetags: cpp

* const
1. 给予被修饰对象 *只读* 属性
   1) const变量                  ： =必须初始化= ，初始化后不可修改
                                 （const全局变量 内部链接性)
   2) const[[id:878bbff5-6362-4cf9-ab1c-15bc1849cd79][指针]]（先左后右）      ：指针常量， =必须初始化= （不能修改指向）
                                   常量指针（不能修改指向的内容）
   3) const[[id:1f772bce-0f88-46a2-ab44-c9bf04b30653][引用]]                  ： =必须初始化= （常量、非常量、临时对象），不能修改 引用内容
   4) const[[id:d63526f2-db09-4c79-8a1a-57d6a7d82ec9][类对象]]                ： =必须初始化= ，只能调用const成员函数
   5) const成员变量              ： =必须初始化= （类构造函数），不能修改
   6) const成员函数（this指针）  ：不能修改 成员变量

2. 分为 顶层const 和 底层const；拷贝时 -> 忽略 顶层const，保留 底层const[fn:1]
   - 顶层const :: 修饰 *自身*
   - 底层const :: 修饰 *引用/指向的对象*
   #+begin_comment
   指针 可以是 顶/底const
   引用 可以是 底const
   #+end_comment

3. const 用于声明常量或只读变量，更多体现的是运行时的 *只读语义* （运行时常量）只有当使用 常量表达式 初始化 const int 时体现出常量语义（编译时常量）；而 constexpr 是 *常量语义* （编译时常量，用于与const区分）
   #+begin_comment
   运行时只读语义 -> const
   常量语义       -> constexpr
   #+end_comment








* Footnotes
[fn:1]
#+begin_src cpp :results output :namespaces std :includes <iostream>
/* 顶层const：拷贝时忽略 */
const int a = 10;   // 顶层const
int b = a;          // 合法（忽略顶层const）

/* 底层const：拷贝时不忽略 */
const int* p = &a;  // 底层const（指针指向常量）
// int* q = p;      // FIXME 错误（不能忽略底层const）
const int* r = p;   // 合法（目标也有底层const）
#+end_src
