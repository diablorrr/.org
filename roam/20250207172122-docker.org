:PROPERTIES:
:ID:       a47cc941-ccc6-4893-9862-d5b245ea912b
:END:
#+title: docker
* 使用
** docker容器内走代理
:PROPERTIES:
:ID:       701e41cb-af1b-44de-abc6-d83a0aadd738
:END:
1. docker run -it --network host <镜像名> bash


* 查询
|                  | 命令                                        | 参数                   | 功能                                     |
|------------------+---------------------------------------------+------------------------+------------------------------------------|
| docker container | --help                                      |                        | 查看相关命令                             |
| (容器)           | run <镜像名>                                |                        | 从镜像创建并运行容器                     |
|                  |                                             | -d                     | 后台运行                                 |
|                  |                                             | -it                    | 交互终端模式                             |
|                  |                                             | --name <容器名>        | 设置容器名                               |
|                  |                                             | -p <宿主端口:容器端口> | 端口映射                                 |
|                  |                                             | -v <宿主路径:容器路径> | 挂载卷                                   |
|                  |                                             | --rm                   | 容器退出时，自动删除容器(用于测试)       |
|                  |                                             | --network host         | 使用宿主机的网络                                 |
|                  | ls                                          |                        | 查看运行中的容器                         |
|                  |                                             | -a                     | 查找所有容器                             |
|                  | start <容器名>                              |                        | 启动已停止的容器                         |
|                  | stop <容器名>                               |                        | 停止运行中的容器                         |
|                  | restart <容器名>                            |                        | 重启容器                                 |
|                  | rm <容器名>                                 |                        | 删除容器                                 |
|                  |                                             | -f                     | 强制删除运行中的容器                     |
|                  | exec <容器>                                 |                        | 执行命令(运行中的容器内)                 |
|                  |                                             | -it <容器名> bash      | 进入容器终端                             |
|                  | cp <容器名称>:<容器内路径> <主机路径>[fn:1] |                        | 复制文件/文件夹(容器和文件系统间)        |
|------------------+---------------------------------------------+------------------------+------------------------------------------|
| docker image     | --help                                      |                        | 查看相关命令                             |
| (镜像)           | ls                                          |                        | 查看本地镜像                             |
|                  | pull <镜像名>:<标签>                        |                        | 下载镜像(从镜像仓库)                     |
|                  | rm                                          |                        |                                          |
|                  | build                                       |                        | 从Dockerfile构建镜像                     |
|                  |                                             | -t                     | 设置 镜像名字:标签                       |
|------------------+---------------------------------------------+------------------------+------------------------------------------|
| 网络             | docker container prune --filter "until=36h" |                        | 删除所有停止的容器，但36小时内创建的除外 |
|                  | docker rmi <镜像名/镜像id>                  |                        | 删除镜像                                 |
|------------------+---------------------------------------------+------------------------+------------------------------------------|
|                  | docker inspect <image>                      |                        | 查看镜像包含哪些层                       |
** 配置
| 路径                    | 作用                      |
|-------------------------+---------------------------|
| /etc/docker/daemon.json | 配置镜像源，影响pull/push |
*** 镜像设置
#+begin_src json
{
        "registry-mirrors": [
                "https://docker.lms.run",
                "https://hub.rat.dev",
                "https://docker.1panel.live"
        ]
}
#+end_src


* 概念
- 简介 :: 开源的[[id:ba0da3ad-6139-4aca-898a-9c6894e4bd68][容器化]]平台，用于快速构建、部署和运行应用程序及其依赖项，实现环境隔离
- 三大概念 :: 仓库 镜像 容器(本质是进程)
- 构建上下文 :: 构建镜像时，传给docker build命令的目录(或url) => 用于构建镜像
- 多阶段构建 :: 优化镜像体积 => 允许在单个[[id:8987bd3a-de7e-4c6c-83de-96d8b42ccfdd][Dockerfile]]中使用多个临时镜像，最终仅保留必要的文件和依赖
- 分层机制 ::
  镜像是由多个只读层(镜像层)组成，每层只存储与上一层的差异部分；允许不同镜像共享相同的只读层
  容器就是镜像上加了一层可写层(容器层)，容器停止后可写层丢失，可通过docker commit将可写层转为只读层
  docker commit会涉及到很多文件改动，因此只推荐使用[[id:8987bd3a-de7e-4c6c-83de-96d8b42ccfdd][Dockerfile]]构建镜像
  [[id:8987bd3a-de7e-4c6c-83de-96d8b42ccfdd][Dockerfile]]中每一个指令对应一层 => 优化
  优化方式：合并多个RUN、COPY等 或 多阶段构建


* Footnotes
[fn:1] 可以互换：<主机路径> <容器名称>:<容器内路径>
