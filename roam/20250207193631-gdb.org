:PROPERTIES:
:ID:       8a46ff3c-7b8e-42e8-a6c9-bdaf55195c4a
:END:
#+title: gdb

* 使用
** 打印一个复杂类中的数据
1. 在类中写一个print()函数
2. gdb中使用call print() #注意:[[id:8ab4df56-e11f-42b8-87f8-4daa2fd045db][cpp]]需要强制刷新缓冲区才能看到结果
3. 强制刷新缓冲区
   1) gdb调用命令 call (void)fflush(stdout)
   2) 在print()函数中使用 cout << std::flush
*** 示例

#+begin_src cpp
template<typename T>
class List;

template<typename T>
struct Node {
    T data;
    Node* prev;
    Node* next;
    Node(const T& value = T()): data(value), prev(nullptr), next(nullptr){}
};

template<typename T>
class Iterator {
public:
    using value_type = T;
    using referecne = T&;
    using pointer = T*;
    using iterator_category = std::bidirectional_iterator_tag;
    using difference_type = std::ptrdiff_t;

    Iterator(Node<T>* ptr = nullptr): node_ptr(ptr) {}

    referecne operator*() const{
        return node_ptr->data;
    }

    pointer operator->() const {
        return &(node_ptr->data);
    }

    Iterator& operator++() {
        if (node_ptr) node_ptr = node_ptr->next;
        return *this;
    }

    //复用前置++
    Iterator operator++(int) {
        Iterator tmp = *this;
        ++(*this);
        return tmp;
    }

    Iterator& operator--() {
        if (node_ptr) node_ptr = node_ptr->prev;
        return *this;
    }

    Iterator operator--(int) {
        Iterator tmp = *this;
        --(*this);
        return tmp;
    }

    bool operator==(const Iterator& other) const {
        return node_ptr == other.node_ptr;
    }

    bool operator!=(const Iterator& other) const {
        return node_ptr != other.node_ptr;
    }

private:
    Node<T>* node_ptr;
    friend class List<T>;
};


template<typename T>
class List {
public:
    using iterator = Iterator<T>;
    using const_iterator = Iterator<T>;

    List() {
        head = new Node<T>();
        tail = new Node<T>();
        head->next = tail;
        tail->prev = head;
    }

    ~List() {
        clear();
        delete head;
        delete tail;
    }

    List(const List& other) = delete;
    List& operator=(const List& other) = delete;

    iterator insert(iterator pos, const T& value) {
        Node<T>* cur = pos.node_ptr;
        Node<T>* pre = cur->prev;
        Node<T>* new_node = new Node<T>(value);

        new_node->next = cur;
        new_node->prev = pre;
        cur->prev = new_node;
        pre->next = new_node;

        return iterator(new_node);
    }

    iterator erase(iterator pos) {
        Node<T>* cur = pos.node_ptr;
        if (cur == head || cur == tail) return pos;

        Node<T>* pre = cur->prev;
        Node<T>* nxt = cur->next;

        pre->next = nxt;
        nxt->prev = pre;

        delete cur;

        return iterator(nxt);
    }

    void push_front(const T& value) {
        insert(begin(), value);
    }

    void push_back(const T& value) {
        insert(end(), value);
    }

    void pop_front() {
        if (!empty()) {
            erase(begin());
        }
    }

    void pop_back() {
        if (!empty()) {
            iterator tmp = end();
            --tmp;
            erase(tmp);
        }
    }

    T& front() {
        return head->next->data;
    }

    T& back() {
        return tail->prev->data;
    }

    bool empty() const {
        return head->next == tail;
    }

    size_t size() const {
        size_t count = 0;
        for (auto it = begin(); it != end(); ++it) {
            ++count;
        }
        return count;
    }

    //error:for循环中删除元素
    void clear() {
        if (empty()) return;
        for (auto it = begin(); it != end(); ++it) {
            erase(it);
        }
    }

    iterator begin() {
        return iterator(head->next);
    }

    iterator end() {
        return iterator(tail);
    }

    void print() {
        if (empty()) {
            std::cout << "empty";
            return;
        }
        for (auto it = begin(); it != end(); ++it) {
            std::cout << *it << " ";
        }
        std::cout << std::flush;
    }

private:
    Node<T>* head;
    Node<T>* tail;
};

#+end_src

** 给某个文件中某个类的某个函数打断点
1. break file.cpp:className::function
** 给头文件打断点
1. 禁用内联优化
2. break file.cpp:行号
** gdb调试python和cpp混合
1. gdb python -ex 'run xxx.py'






* 查询
** 终端命令
| 命令 | 参数                     | 作用                         |
|------+--------------------------+------------------------------|
| gdb  | <可执行文件> <core dump> | 进入gdb，[调试core dump文件] |
|      | -p <进程编号>            | 调试正在运行的进程           |
|      | -d <源代码目录>          | 设置源码目录                 |
** gdb内部命令
| 常用 | 快捷键                 | 作用                                                                       |
|------+------------------------+----------------------------------------------------------------------------|
|      | file <二进制文件>      | 加载文件符号                                                               |
|      | set args               | 设置程序的运行参数([[id:c83f7932-3d36-4d54-8252-151cb74951d1][main函数]]的参数)                                         |
|      | set var                | 设置变量的值                                                               |
| *    | r                      | 运行/重新运行程序                                                          |
| *    | u <行号>               | 运行直到某一行                                                             |
| *    | attach                 | 附加到进程(需要sudo启动gdb)                                                |
| *    | directory <源代码目录> | 设置源代码搜索目录                                                         |
|------+------------------------+----------------------------------------------------------------------------|
| *    | bt                     | 查看当前调用栈                                                             |
|      | i thread               | 查看所有线程                                                               |
|      | f <帧编号>             | 切换帧                                                                     |
|------+------------------------+----------------------------------------------------------------------------|
| *    | b <> [if <exp>]        | 打断点(空的话是在当前行打断点)；[]条件断点                                 |
| *    | tb                     | 临时断点                                                                   |
| *    | i b                    | 查看所有断点                                                               |
| *    | d <断点数字>           | 删除断点                                                                   |
|      | save <文件.gdb>        | 保存断点到文件(.gdb文件里可以写：run、file之类的命令)                      |
|      | source <文件.gdb>      | 加载保存的断点                                                             |
|------+------------------------+----------------------------------------------------------------------------|
|      | watch <var> [if <exp>] | 监视变量(值写入时暂停)                                                     |
|      | rwatch <var>           | 监视变量(值读取时暂停)                                                     |
|      | awatch <var>           | 监视变量(值写入、读取时暂停)                                               |
|------+------------------------+----------------------------------------------------------------------------|
| *    | p <var/func>           | 打印变量的值；也能打印函数，会执行[fn:1]；string类型需要调用operator[fn:2] |
|      | whatis <>              | 打印类型名称                                                               |
|      | ptype <>               | 打印复杂类型详细定义                                                       |
|------+------------------------+----------------------------------------------------------------------------|
|------+------------------------+----------------------------------------------------------------------------|
|      | ~/[[id:4a454bad-d33c-475f-bafb-805251aab638][.gdbinit]]             | gdb配置文件                                                                |




* Footnotes
[fn:2] 假设name为string；p name.operator=("hello") => 给name赋值为"hello"
[fn:1] p var；p func()
