:PROPERTIES:
* 使用
- 生成[[id:8ab4df56-e11f-42b8-87f8-4daa2fd045db][cpp]]代码 :: --cpp_out=./out：指定输出目录 ./out，会生成 example.pb.h 和 example.pb.cc
  #+begin_src bash
  protoc --cpp_out=./out example.proto
  #+end_src
- 生成[[id:a5c426e4-365b-447d-89f3-eddc9c517a01][gRPC]]代码 :: --grpc_out 生成 example.grpc.pb.h 和 example.grpc.pb.cc
  #+begin_src bash
  protoc --grpc_out=./out --plugin=protoc-gen-grpc=`which grpc_cpp_plugin` example.proto
  #+end_src
* 保留旧的pb和grpc文件导致编译错误
1. 删除后，重新用protoc生成pb和grpc文件


* 概念
- protoc ::
  1. 是[[id:13f67abf-4087-4d20-87d7-ed11e5b99edc][protobuf]]的编译器
  2. 用于将  文件编译成 不同语言的代码 => 语言的转换工作由对应的语言插件实现
** 插件
protoc-gen-cpp(protoc内置) => 解析.proto文件生成相应[[id:8ab4df56-e11f-42b8-87f8-4daa2fd045db][cpp]]代码
grpc_cpp_plugin =>

* .proto
- 简介 ::
  1. [[id:13f67abf-4087-4d20-87d7-ed11e5b99edc][protobuf]]的文件扩展名
  2. [[id:2732f7a7-3f0e-4ce0-a466-38b9a072818c][protoc]]从.proto文件生成服务端、客户端代码
** 使用
服务(暴露给客户端的远程方法集合) => rpc方法 => 类型、输入参数、输出参数
消息(服务端、客户端交换的数据结构) => 字段 => 类型、索引值
