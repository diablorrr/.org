:PROPERTIES:
:ID:       183c9f25-d3a3-4a95-baa1-5e1a3b201a11
:END:
#+title: CMakeLists.txt

* 使用
:PROPERTIES:
:VISIBILITY: show2levels
:END:
** 设置cpp17标准智能感知
1. CMakeLists.txt编写如下
   #+begin_src cmake
   cmake_minimum_required(VERSION 3.10)
   project(MyProject CXX)

   set(CMAKE_CXX_STANDARD 17)  # 设置 C++17 标准
   set(CMAKE_CXX_STANDARD_REQUIRED ON)  # 强制使用 C++17，不允许降级
   set(CMAKE_CXX_EXTENSIONS OFF)  # 使用纯 C++17 标准，不使用编译器扩展
   set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

   add_executable(myapp main.cpp)
   target_compile_features(myapp PRIVATE cxx_std_17)  # 为 myapp 启用 C++17
   #+end_src
2. mkdir build && cd build
3. cmake ..
4. cmake --build .
** 常见问题:书写顺序
[[id:2e20f81d-56f0-4af5-a00c-b77fce675287][find_package()]]顺序问题：被依赖的放上头
eg：protobuf在grpc之前
** 没有[[id:c4819291-b93f-4864-b210-aa436634ac22][.cmake]]配置文件的package
- 做法 :: 我们会先包含库文件目录，将目录里我们需要的文件存到一个变量里，然后目标再去链接
- 示例 ::
#+begin_src cmake
include_directories(/usr/lib)
file(GLOB absl_libs "/usr/lib/libabsl_*.so")
target_link_libraries(main ${absl_libs})
#+end_src






* 查询
:PROPERTIES:
:VISIBILITY: show2levels
:END:
** 语法
| 指令                          | 作用                                                                   |
|-------------------------------+------------------------------------------------------------------------|
| cmake_minimum_required        | 设置项目所需最低cmake版本                                              |
| project                       | 定义 *项目名称* (可指定语言、版本)，会设置<项目名>_SOURCE_DIR等变量    |
| add_executable                | 生成真实目标： *可执行文件*                                            |
| add_library                   | 生成真实目标：创建库(*默认静态库*)，选项(STATIC、OBJECT[fn:2]、SHARED) |
| target_include_directories    | 为目标添加 *头文件搜索路径* (作用域控制)                               |
| target_link_libraries         | 为目标 *链接库或目标* (作用域控制)                                     |
| [[id:2e20f81d-56f0-4af5-a00c-b77fce675287][find_package]]                  | 查找并加载外部依赖包                                                   |
| [[id:88ee430e-b4b8-4822-952b-95597384596f][pkg_check_modules]]             | 使用[[id:0867edf9-0f48-48ed-92be-e197f1546b05][pkg-config]]查找库                                                   |
| [[id:0bab8710-69ef-493f-8bc7-cc6817b95959][set]]                           | 定义 *变量、缓存变量、环境变量*                                        |
| [[id:add3a7d8-31e3-4c84-8103-d1c2c4be7dbd][message]]                       | *打印信息* (调试或状态信息)                                            |
| add_subdirectory              | *添加子目录* ，执行其CMakeLists.txt以构建子项目                        |
| [[id:e434d7b8-bf65-4876-bcbe-9c3116ff573a][file]]                          | *通配符匹配文件*                                                       |
| [[id:b15f4487-4bc6-4bd6-9432-474208e9b6b2][install]]                       | 安装(复制文件到指定目录)                                               |
| [[id:24455af9-9c17-4ac2-a12d-710659b1b25c][add_custom_command]]            | 自定义构建命令(用于如：预处理或后处理)，与真实目标或伪目标搭配使用     |
| [[id:989e79cb-35ef-402b-be97-ad3fd53d9054][set_target_properties]]         | 批量设置目标的属性                                                     |
| [[id:168fe76e-eaf9-44df-b0b8-a17935bd5f1b][ExternalProject_Add]]           | 构建外部项目(子项目)                                                   |
| target_compile_options        | 指定 *编译选项* (如-Wall、-O3)                                         |
|-------------------------------+------------------------------------------------------------------------|
| option                        | set BOOL类型的缓存变量的简写                                           |
| add_custom_target             | 定义伪目标，类似make clean                                             |
| include                       | 包含其他CMake脚本文件，扩展功能                                        |
| target_compile_definitions    | (预处理器)为目标添加预处理宏定义                                       |
| target_compile_options        | (优化器)提高代码性能：优化级别、函数内联等                             |
| enable_testing() + add_test() | 启用测试并定义测试用例(需配合CTest使用)                                |
| find_library/find_path        | 手动查找库或头文件路径                                                 |
** 预定义变量
| 类别            | 预定义变量                     | 作用                                            |
|-----------------+--------------------------------+-------------------------------------------------|
| 项目配置        | CMAKE_BUILD_TYPE               | 设置构建类型(设置后，会自动设置相关编译器参数)  |
|                 | CMAKE_INSTALL_PREFIX           | 安装的前缀                                      |
|                 | CMAKE_CXX_STANDARD             | 设置cpp标准[fn:1]                               |
|                 | CMAKE_CXX_STANDARD_REQUIRED    | 强制编译器使用标准                              |
|                 | CMAKE_CXX_EXTENSIONS           | 编译器扩展，一般设置OFF                         |
|                 | CMAKE_EXPORT_COMPILE_COMMANDS  | 生成[[id:9653d634-a6ed-45c9-a7f7-f7f51f024ab9][compile_commands.json]]                       |
|-----------------+--------------------------------+-------------------------------------------------|
| project相关变量 | PROJECT_NAME                   | 项目名                                          |
|                 | PROJECT_VERSION                |                                                 |
|                 | PROJECT_SOURCE_DIR             |                                                 |
|                 | PROJECT_BINARY_DIR             |                                                 |
|                 | <项目名>_VERSION               |                                                 |
|                 | <项目名>_SOURCE_DIR            |                                                 |
|                 | <项目名>_BINARY_DIR            |                                                 |
|-----------------+--------------------------------+-------------------------------------------------|
| 库相关变量      | BUILD_SHARED_LIBS              | ON指定为SHARED，OFF或非指定为STATIC             |
|                 | CMAKE_POSTION_INDEPENDENT_CODE | 静态库编译时也生成PIC(位置无关代码)，解决[fn:3] |
|-----------------+--------------------------------+-------------------------------------------------|
| [[id:4012acd2-c162-4270-8c93-9922a3502f50][qt]]相关          | CMAKE_AUTOMOC                  | 生成信号和槽调用的反射机制                      |
|                 | CMMKE_AUTORCC                  | 编译qt资源文件                                  |
|                 | CMAKE_AUTOUIC                  | qt designer相关                                 |
|-----------------+--------------------------------+-------------------------------------------------|
|                 | CMAKE_CURRENT_SOURCE_DIR       | 当前CMakeLists.txt文件所在的目录                |



* 概念
- 简介 ::
  1. 是 [[id:c651b8b0-bc76-451d-acac-0ea55329f0e8][cmake]] 的项目配置文件
  2. [[id:c651b8b0-bc76-451d-acac-0ea55329f0e8][cmake]] 通过解析 CMakeLists.txt 生成 Makefile、Ninja 文件或 Visual Studio 项目，适配不同的构建系统
** 缓存
- 缓存生成机制 :: cmake -B build => 检测环境 => 将结果写入缓存文件[[id:045024e9-f2c8-4be5-81e0-b70661b70921][CMakeCache.txt]]
- 清理缓存 :: 外部环境发生变化 => 删除CMakeCache.txt即可
** 属性传播机制
- 作用 :: 控制对目标的可见性
  + PRIVATE :: 仅对当前目标可见，不会传递给链接到此目标的其他目标
  + PUBLIC :: 不仅对当前目标可见，还会传递给链接到此目标的其他目标
  + INTERFACE :: 对当前目标不可见，只会传递给链接到此目标的其他目标
** 变量
*** 变量类型与引用方式
| 类型     | 引用方式 |
|----------+----------|
| 普通变量 | ${}      |
| 缓存变量 | $ENV{}   |
| 环境变量 | $CACHE{} |
*** 变量传播规则
- 父传子 :: 父模块定义的变量会传递给子模块
- 子不传父 :: 子模块定义的变量不会传递给父模块
  + 设置子传父 :: 子模块中：set(<变量> <值> PARENT_SCOPE)
*** 变量作用域
- 有独立作用域的 ::
  1. function
  2. add_subdirectory的CMakeLists.txt
** 伪目录和真实目标
# 伪目录类似make clean这种
- 伪目标 ::
  + 不生成文件
  + 作用 :: 清理、测试、安装等辅助操作
  + 定义方式 :: add_custom_target
- 真实目标 ::
  + 生成可执行文件、库或输出文件
  + 作用 :: 编译代码、链接库
  + 定义方式 :: add_executable / add_library
** 生成器表达式



* Footnotes
[fn:4] find_package就会去这个路径查找
[fn:3] 动态库无法链接静态库
[fn:2] 建议OBJECT替代STATIC
类似静态库，不生成.a文件，只让cmake记住该库生成哪些对象文件；绕开编译器和操作系统的繁琐规则，保证跨平台
[fn:1]
不要用CMAKE_CXX_FLAGS来添加-std=c++17，因为做不到跨平台：比如MSVC的flag不是-std=c++17；
而且CMAKE_CXX_STANDARD的默认值11，相当于添加-std=c++11选项了
