:PROPERTIES:
:ID:       96fc0b81-37a5-4188-ac92-b0a431500097
:END:
#+title: 内存对齐

* 概念
- 简介 ::
  1. 数据在内存中的地址为其大小的整数倍
  2. 用于提高cpu访问内存的效率 => cpu以块的形式访问内存，若内存未对齐，cpu需要多次内存访问获取完整数据，并进行额外的位移和拼接操作 => 降低效率
** 结构体对齐原则：
1) 结构体内除第一个成员外，其他成员所在的地址是数据类型所占字节的整数倍 => 如果不是整数倍 => 编译器插入填充字节保证成员对齐
2) 结构体内成员各自对齐后，结构体本身还要进行一次内存对齐 => 保证结构体大小是最大成员的整数倍
3) 预编译指令#pragma pack(n)，则所有成员以n字节的整数倍为地址存储
** 示例
*** 示例1:基本类型对齐
#+begin_src cpp
int a;   // 编译器保证 &a 是 4 的倍数（如 0x1000, 0x1004）
double b; // &b 是 8 的倍数（如 0x2000, 0x2008）
#+end_src
*** 示例2:结构体对齐
#+begin_src cpp
struct Example {
    char a;    // 1字节（地址 0）
    // 编译器插入 3 字节填充（地址 1-3）
    int b;     // 4字节（地址 4-7）
    double c;  // 8字节（地址 8-15）
}; // 总大小 = 16 字节（1 + 3填充 + 4 + 8）
#+end_src

#+begin_src cpp
struct Example {
    int b;     // 4字节（0-3）
    char a;    // 1字节（4）
    // 填充 3 字节（5-7）
    double c;  // 8字节（8-15）
}; // 总大小 = 16 字节（4 + 1 + 3填充 + 8）
#+end_src
