:PROPERTIES:
:ID:       74b3a07c-d965-4a3d-aa07-eb49d5a08b7e
:END:
#+title: 虚函数表

* 概念
- 简介 ::
  1. 编译时，生成虚函数表，表内存放指针，指向真实的函数；若派生类有重写基类虚函数，则指向派生类重写的函数，否则指向基类的函数
  2. 运行时(调用对象的构造函数)，将虚函数表首地址赋值给[[id:1af91a2c-5ce4-4095-8572-7632d815a34b][虚函数表指针]](vptr)
  3. 一个类是否有虚函数表，取决于 => 自己或祖宗是否有虚函数
** 示例
*** 示例1:有虚函数的构造函数
#+begin_src cpp
Base* ptr = new Derived();  // 第1行：创建 Derived 对象并用 Base* 指针指向它
ptr->func1();               // 第2行：通过 Base* 调用虚函数 func1()
#+end_src
- 解释 ::
  + 第一行 ::
    1. 调用Derived的构造函数。Derived的构造函数执行前，先调用Base的构造函数，vptr指向Base的虚函数表
    2. Derived构造函数执行后，vptr指向Derived的虚函数表
    3. 对象构造完成后，vptr最终指向Derived的虚函数表
    4. ptr指向对象内的vptr指向的Derived的虚函数表
  + 第二行 ::
    1. 通过ptr找到vptr
    2. 通过vptr找到Derived的虚函数表
    3. 调用Derived::func1()
*** 示例2:虚析构
#+begin_src cpp
Base* ptr = new Derived();
delete ptr;  // 触发多态析构
#+end_src
- 解释 ::
  + 第一行 ::
    1. 此时vptr指向派生类的虚函数表
  + 第二行 ::
    1. 调用派生类的析构函数
    2. vptr指向基类的虚函数表
    3. 调用基类的析构函数
