:PROPERTIES:
:ID:       8d772720-96cc-4a32-851b-a25234a75316
:END:
#+title: select

* 概念
- 简介 ::
  1. [[id:ec7aef91-2628-4ba9-b300-16652314877f][linux]]I/O多路复用下的一种系统调用，用于监视多个[[id:642dbcb1-86f4-466a-9938-cb074939db43][文件描述符]]的状态(可读、可写、异常)
  2. 使用数据结构bitmap来存放需要监听的[[id:3d8ef697-4785-4a83-b35c-47bb10d2a0ce][socket]]
  3. 调用select的时候，就是将当前进程的引用加入到所有监视的[[id:3d8ef697-4785-4a83-b35c-47bb10d2a0ce][socket]]的等待队列，当有任何一个socket收到数据后，中断程序将唤醒进程，进程将遍历一遍socket列表，得到就绪的socket
  4. 低效：[[id:bc1e717e-8053-4968-bfb8-242f4fc935bb][epoll]]针对这些问题进行了解决
     1) 维护等待队列：每次调用select，都将进程的引用加入所有监视的socket的等待队列；每次进程被唤醒(从socket等待队列 => 工作队列)，都将进程从等待队列中移除。每次需要将fd的列表传入内核。有一定开销
     2) 获取就绪socket：没有socket有数据时，进程被阻塞在socket的等待队列；进程被唤醒之后，遍历socket，找到就绪的socket
     3) 每次调用select 耦合执行 维护等待队列 + 阻塞进程 两个步骤
** 示例
*** 示例1:select的使用
#+begin_src c
int s =socket（AF_INET， SOCK_STREAM， 0）;
bind（s， ...）
listen（s， ...）

int fds[] =  存放需要监听的socket

while（1）{
    int n = select（...， fds， ...）
    for（int i=0; i < fds.count; i++）{
        if（FD_ISSET（fds[i]， ...））{
            //fds[i]的数据处理
        }
    }
}
#+end_src
