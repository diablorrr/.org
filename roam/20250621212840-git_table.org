:PROPERTIES:
:ID:       3eb41807-bf67-46de-a1d1-93fcb85e3038
:END:
#+title: git cheat sheet
#+filetags: git

* git table
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| 命令            | 参数                                         | 作用                                                               |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git reset       | --soft                                       | (移动HEAD，同时移动分支)HEAD改变；I和WD不变                        |
|                 | --mixed(默认)                                | HEAD、I改变；WD不变                                                |
|                 | --hard(危险)                                 | HEAD、I、WD改变                                                    |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git branch      |                                              | 查看本地分支                                                       |
|                 | -r                                           | 查看远程分支                                                       |
|                 | -a                                           | 查看本地、远程分支                                                 |
|                 | -d                                           | 安全删除当前分支及提交                                             |
|                 | -D                                           | 强制(有未合并的更改)也删除                                         |
|                 | -m                                           | 重命名分支                                                         |
|                 | -f (--force)                                 | 强制执行操作，即使目标分支存在也会覆盖                             |
|                 | -M                                           | -m和-f的组合[fn:1]                                                 |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git clone       |                                              | 克隆仓库                                                           |
|                 | --depth=1                                    | 只克隆最新的版本(快)                                               |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git checkout    |                                              | 检查分支                                                           |
|                 | tags/<tag名称>                               | 切换到指定tag                                                      |
|                 | -b <分支> <commit>                           | 新建分支并切换                                                     |
|                 | --orphan                                     | 创建没有历史的新分支                                               |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git rebase      |                                              | 将当前分支的更改移到一个分支，保持历史线性                         |
|                 | -i                                           | 交互式修改提交历史                                                 |
|                 | --root                                       | rebase范围扩展到整个提交历史，包括第一个提交                       |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git cherry-pick |                                              | 选择特定提交移到当前分支(无法处理合并提交)                         |
|                 | --abort                                      | cherry-pick产生冲突，撤回                                          |
|                 | --continue                                   | cherry-pick解决冲突，继续                                          |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git log         |                                              | 查看提交历史                                                       |
|                 | --graph                                      | 图形化显示                                                         |
|                 | --oneline                                    | 一行显示提交                                                       |
|                 | --decorate                                   | 显示分支、标签和HEAD的引用信息                                     |
|                 | --all                                        | 显示所有分支                                                       |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git reflog      |                                              | 记录本地HEAD的变更，撤销误操作                                     |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git add         |                                              | 将更改添加到暂存区                                                 |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git stash       |                                              | 将暂存区和工作区的修改保存到一个堆栈，恢复干净状态。使用场景[fn:2] |
|                 | save "注释"                                  | 同上，带注释                                                       |
|                 | list                                         | 查看所有保存的stash记录                                            |
|                 | apply                                        | 恢复最近一次的stash                                                |
|                 | pop                                          | 恢复最近一次的stash(删除对应stash记录)                             |
|                 | drop <stash@{数字}>                          | 删除指定的stash记录                                                |
|                 | clear                                        | 清空所有stash记录                                                  |
|                 | show -p <stash@{数字}>                       | 查看详细的变更内容                                                 |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git commit      |                                              | 暂存区修改提交到版本区；打开消息提交编辑器                         |
|                 | -m                                           | 附带提交信息                                                       |
|                 | -a                                           | 提交时自动添加到暂存区                                             |
|                 | --amend                                      | 修改上一次提交的提交消息                                           |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git diff        |                                              | 差异：工作区、暂存区                                               |
|                 | --cached/staged                              | 差异：暂存区、最新提交                                             |
|                 | HEAD                                         | 差异：工作区、最新提交                                             |
|                 | <commit1> <commit2>                          | 差异：两个提交                                                     |
|                 | <分支>                                       | 差异：当前分支、其他分支                                           |
|                 | <分支1>..<分支2>                             | 差异：两个分支差异                                                 |
|                 | -- . ':(exclude)<排除的目录或文件>'          | 差异：排除目录或文件                                               |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git push        |                                              | 正常推送分支                                                       |
|                 | -f                                           | 忽略冲突，覆盖远程分支历史(危险)                                   |
|                 | <远程仓库名> -d <分支>                       | 删除远程分支                                                       |
|                 | -u <远程仓库名> <分支名>                     | 推送到远程仓库的分支                                               |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git pull        |                                              | 拉取分支                                                           |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git merge       | <分支>                                       | 将指定分支合并到当前分支                                           |
|                 | -                                            | 将上一次切换的分支合并到当前分支                                   |
|                 | --abort                                      | merge产生冲突，撤回                                                |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git fetch       |                                              | 获取最新更新                                                       |
|                 | --prune                                      | 获取最新更新，让分支保持一致                                       |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git remote      |                                              | 列出远程仓库                                                       |
|                 | -v                                           | 列出远程仓库和URL                                                  |
|                 | add <远程仓库名[fn:3]> <远程仓库地址[fn:4]>  | 添加远程仓库                                                       |
|                 | remove <远程仓库名>                          | 删除远程仓库                                                       |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git submodule   |                                              | 允许将一个git仓库作为另一个git仓库的子模块，保持仓库间独立版本控制 |
|                 | init                                         | 初始化子模块(读取 .gitmodules 文件中的信息设置子模块url和路径)     |
|                 | update [--recursive]                         | 更新子模块(根据url，git clone子模块仓库)，可[递归更新所有子模块]   |
|                 | add <子模块git地址> [<子模块在主仓库的位置>] | 添加子模块，生成 .gitmodules                                       |
|                 | sync                                         | 同步 .gitmodules 的配置                                            |
|                 | status                                       | 查看子模块状态                                                     |
|                 | set-url <子模块本地路径> <git远程url>        | 修改 .gitmodules 的url配置                                         |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|
| git rm          |                                              | 删除工作区和索引区的内容                                           |
|                 | -r                                           | 递归删除                                                           |
|                 | --cached                                     | 删除索引区内容                                                     |
|-----------------+----------------------------------------------+--------------------------------------------------------------------|


* Footnotes
[fn:1] 示例：git branch -M main  --->  含义：将当前分支重命名为main；如果main分支已经存在，强制覆盖它
[fn:2]
(背景) 工作区有修改 或 暂存区有修改 都不能 切换分支。只能commit后才行
在一个分支开发新功能，做到一半出现紧急bug需要处理，但是新功能开发一半不想提交 => git stash
[fn:3] 默认是origin
[fn:4] 示例url：git@github.com:diablorrr/remote_test.git
