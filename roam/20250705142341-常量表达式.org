:PROPERTIES:
:ID:       fec1bdbd-cae6-4b45-b136-00dcad95b5ad
:END:
#+title: 常量表达式
#+filetags: cpp

* 常量表达式 [[https://www.learncpp.com/cpp-tutorial/constant-expressions/][learncpp5.5]] [[https://blog.csdn.net/lemonxiaoxiao/article/details/128344695?ops_request_misc=elastic_search_misc&request_id=13c51d0e3756dcb6b158d811a6e15cae&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-128344695-null-null.142^v102^pc_search_result_base9&utm_term=constexpr&spm=1018.2226.3001.4187][csdn]]
1. 由 *多个常量组成* 的表达式，编译期确定值，用于 *需要 编译时可求值表达式 的上下文*
   1) 作为 *[[id:b06260e2-ed7a-4b12-8e9d-b07a3e564a75][constexpr变量]]* 初始值
   2) 作为 *[[id:9148c346-c9dd-4480-9b37-25d448987e98][非类型模板实参]]* 初始值
   3) *std::array* 和 *C风格数组* 定义数组长度

2. 可以在 运行时求值 或 编译时求值（在常量表达式上下文时）

3. *常见的常量表达式*
   - [[id:27733720-d27e-4852-bb07-b50130457fc9][字面值]]（'5'、'1.2'）
   - 常量表达式 和 运算符 组合成的常量表达式（3 + 4）
   - 用常量表达式初始化的 =const int=
     #+begin_src cpp :results output :namespaces std :includes <iostream>
     const int a {10};       // 由于历史原因，NOTE 它是常量表达式，能够在编译时计算
     int c {9};              // 非常量表达式
     const int d {c};        // 非常量表达式
     const double b {10.0};  // 非常量表达式
     #+end_src
   - constexpr变量
   - constexpr函数
   - 非类型模板参数
   - 枚举成员
   - 类型特性 =<type_traits>=  [[https://en.cppreference.com/w/cpp/header/type_traits.html][cppreference]]
   - constexpr lambdas
