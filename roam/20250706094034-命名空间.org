:PROPERTIES:
:ID:       604d5ad5-f060-4504-b407-933fc82aeb7e
:END:
#+title: 命名空间
#+filetags: cpp

* 命名空间 [[https://www.learncpp.com/cpp-tutorial/naming-collisions-and-an-introduction-to-namespaces/][learncpp2.9]] [[https://www.learncpp.com/cpp-tutorial/user-defined-namespaces-and-the-scope-resolution-operator/][learncpp7.2]]
1. 命名空间 是一种 *作用域* ； *访问内部名称* 通过 =::（作用域解析运算符）=

2. 在 命名空间 中只能有 [[id:1752c1cb-3fd8-4272-96c9-fa73e14a7d3c][声明和定义]]， *不能有执行语句，除非是定义的一部分* ；分文件编写的 [[id:1752c1cb-3fd8-4272-96c9-fa73e14a7d3c][声明和定义]] 需要在一个命名空间中

3. 命名空间的 *使用*
   1) 定义命名空间          ： =namespace <名称> {}=
   2) 访问命名空间中的标识符： =<命名空间>::<标识符>=
   3) 导入命名空间中的标识符： =using namespace <命名空间>= / =using <命名空间>::<名称>= 见：[[id:6b9c2860-3495-43ed-a6a9-8b92d7c8680f][using声明和using指示]]
   4) 给命名空间起别名      ： =namespace <别名> = <命名空间>=
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   // 定义命名空间
   namespace <大写开头的命名空间名> {}

   // 访问命名空间
   std::<名称>

   // 将命名空间内的<标识符>导入全局命名空间
   using namespace std

   // 给命名空间起别名
   namespace Foo::Goo
   {
       int add(int x, int y)
       {
           return x + y;
       }
   }
   int main()
   {
       namespace Active = Foo::Goo; // active now refers to Foo::Goo

       std::cout << Active::add(1, 2) << '\n'; // This is really Foo::Goo::add()

       return 0;
   } // The Active alias ends here
   #+end_src

4. 全局作用域 属于 *隐式的全局命名空间* ，因此不能有执行语句
   #+begin_src cpp :results output :namespaces std :includes <iostream>

   #include <iostream> // imports the declaration of std::cout into the global scope

   // All of the following statements are part of the global namespace

   void foo();    // okay: function forward declaration
   int x;         // compiles but strongly discouraged: non-const global variable definition (without initializer)
   int y { 5 };   // compiles but strongly discouraged: non-const global variable definition (with initializer)
   x = 5;         // compile error: executable statements are not allowed in namespaces

   int main()     // okay: function definition
   {
       return 0;
   }

   void goo();    // okay: A function forward declaration

   #+end_src
   =::<名称>= （无前缀作用域解析运算符）一个有用的场景
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   f1(){}
   namespace N1 {
     void f1(){}
     void f2(){
       f1();
       ::f1();      // 通过这种方式才能访问全局命名空间的f1
     }
   }
   #+end_src

5. 命名空间可以 *嵌套*
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   namespace Foo
   {
       namespace Goo // Goo is a namespace inside the Foo namespace
       {
           int add(int x, int y)
           {
               return x + y;
           }
       }
   }

   int main()
   {
       std::cout << Foo::Goo::add(1, 2) << '\n';
       return 0;
   }
   #+end_src
   *cpp17 后的等价形式*
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   namespace Foo::Goo // Goo is a namespace inside the Foo namespace (C++17 style)
   {
       int add(int x, int y)
       {
           return x + y;
       }
   }

   int main()
   {
       std::cout << Foo::Goo::add(1, 2) << '\n';
       return 0;
   }
   #+end_src

6. 命名空间 *命名规范*
   - 命名规范     :: 大写字母开头，见：[[id:29f43a49-8123-4541-a02d-02c7ed24a042][命名规范]] -> 因为这样可以统一访问 类类型、命名空间
   - 层级命名规范 :: =公司/组织 :: 项目/库 :: 模块= （可以选择拆掉公司/组织 或 模块）

7. 除此之外还有：[[id:6b7beb8f-fac9-4651-bc19-ef423f8f7a4d][匿名命名空间]]、[[id:bb201915-d4d8-41d1-bf66-3b93bebd5ff3][内联命名空间]]
