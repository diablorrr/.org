:PROPERTIES:
:ID:       fbf786c2-5b6e-47a1-81b9-c1c644b567bb
:END:
#+title: 头文件
#+filetags: cpp

* 头文件 [[https://www.learncpp.com/cpp-tutorial/header-files/][参考]]
1. =.h= 结尾的文件，里面存放一系列的 前向声明；用于 *多文件程序链接* ，是 [[id:98b78b88-32ba-4ad7-b5d5-efeae3da8405][前向声明]] 的替代方法
   #+begin_example
   有一个cpp文件A，还有很多其他cpp文件；现在其他文件都要使用到A中的某个函数f
   前向声明：我们需要在所有其他文件中，前向声明f，随着文件数量增多，这将极其繁琐
   头文件：我们将f放入头文件H中，在其他文件中#include即可
   #+end_example

2. *包含头文件* 的方法：用 预处理指令 #include ，见 [[id:a48d200f-d7ad-41ad-8592-a7ff528378ea][预处理器]]
   - #include <> 搜索路径 :: 系统目录
   - #include "" 搜索路径 :: 当前目录 -> 系统目录

3. *头文件中不应该包含定义* ，会违反 [[id:c611b7e9-f4e4-4ac4-9a84-fddb01e4275e][单一定义规则(ODR)]] 的 第2条
   add.h
   #+begin_src cpp :results output :namespaces std :includes <iostream>

   // We really should have a header guard here, but will omit it for simplicity (we'll cover header guards in the next lesson)

   // definition for add() in header file -- don't do this!
   int add(int x, int y)
   {
       return x + y;
   }

   #+end_src
   add.cpp
   #+begin_src cpp :results output :namespaces std :includes <iostream>

   #include "add.h" // Contents of add.h copied here

   #+end_src
   main.cpp
   #+begin_src cpp :results output :namespaces std :includes <iostream>

   #include "add.h" // Contents of add.h copied here
   #include <iostream>

   int main()
   {
       std::cout << "The sum of 3 and 4 is " << add(3, 4) << '\n';

       return 0;
   }

   #+end_src
   ------------------------------*预处理后*------------------------------
   main.cpp
   #+begin_src cpp :results output :namespaces std :includes <iostream>

   // from add.h:
   int add(int x, int y)
   {
       return x + y;
   }

   // contents of iostream header here

   int main()
   {
       std::cout << "The sum of 3 and 4 is " << add(3, 4) << '\n';

       return 0;
   }

   #+end_src
   add.cpp
   #+begin_src cpp :results output :namespaces std :includes <iostream>

   int add(int x, int y)
   {
       return x + y;
   }

   #+end_src
   ------------------------------*链接时*--------------------------------
   链接器 发现 add() 有两个定义：main.cpp、add.cpp -> 链接错误

4. *头文件重复包含问题* ，使用 头文件保护符 [[https://www.learncpp.com/cpp-tutorial/header-guards/][参考]]
   square.h
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   int getSquareSides()
   {
       return 4;
   }
   #+end_src
   wave.h
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   #include "square.h"
   #+end_src
   main.cpp
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   #include "square.h"
   #include "wave.h"

   int main()
   {
       return 0;
   }
   #+end_src
   ------------------------------*预处理后*------------------------------
   main.cpp
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   int getSquareSides()  // from square.h
   {
       return 4;
   }

   int getSquareSides() // from wave.h (via square.h)
   {
       return 4;
   }

   int main()
   {
       return 0;
   }
   #+end_src
   重复定义 -> 编译错误
   ------------------------------*头文件保护符*----------------------------
   square.h
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   #ifndef SQUARE_H
   #define SQUARE_H

   int getSquareSides()
   {
       return 4;
   }

   #endif
   #+end_src
   wave.h
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   #ifndef WAVE_H
   #define WAVE_H

   #include "square.h"

   #endif
   #+end_src
   main.cpp
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   #include "square.h"
   #include "wave.h"

   int main()
   {
       return 0;
   }
   #+end_src
   ------------------------------*预处理后*------------------------------
   main.cpp
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   // Square.h included from main.cpp
   #ifndef SQUARE_H // square.h included from main.cpp
   #define SQUARE_H // SQUARE_H gets defined here

   // and all this content gets included
   int getSquareSides()
   {
       return 4;
   }

   #endif // SQUARE_H

   #ifndef WAVE_H // wave.h included from main.cpp
   #define WAVE_H
   #ifndef SQUARE_H // square.h included from wave.h, SQUARE_H is already defined from above
   #define SQUARE_H // so none of this content gets included

   int getSquareSides()
   {
       return 4;
   }

   #endif // SQUARE_H
   #endif // WAVE_H

   int main()
   {
       return 0;
   }
   #+end_src

5. 古代和现代的 *cpp特有头文件、c兼容头文件*
   |-----------------+---------+--------------------|
   | 头文件类型      | 头文件  | 标识符所处命名空间 |
   |-----------------+---------+--------------------|
   | cpp特有         | <xxx>   | std                |
   | c兼容           | <cxxx>  | std；全局（可选）  |
   | cpp特有（古代） | <xxx.h> | 全局               |
   | c兼容（古代）   | <xxx.h> | 全局；std（可选）  |
   |-----------------+---------+--------------------|
   因此 <iostream> 和 <iostream.h> 不相同，它们的命名空间不一样
   - 历史原因 :: 委员会将标准库移到std命名空间，会导致以前使用 <xxx.h> 的程序失效，于是弄出了新的头文件 <xxx>
