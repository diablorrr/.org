:PROPERTIES:
:ID:       d85053ba-baae-419d-9902-edc51e53198e
:END:
#+title: 全局变量
#+filetags: cpp

*Best Practice* ：
1. 全局变量定义在命名空间，而不是全局命名空间
2. 尽量不使用全局变量

* 全局变量 [[https://www.learncpp.com/cpp-tutorial/introduction-to-global-variables/][learncpp7.4]] [[https://www.learncpp.com/cpp-tutorial/why-non-const-global-variables-are-evil/][learncpp7.8]]
1. *函数外部声明的变量* ；默认具有 [[id:f6bf51b1-6034-48c5-9fea-81e561eef430][外部链接]]性

2. *初始化顺序* ：静态初始化 -> 动态初始化；见：[[id:819c9ef5-5220-4678-994a-3122d7d17ab7][初始化]]
   - 静态初始化 :: 以 [[id:b06260e2-ed7a-4b12-8e9d-b07a3e564a75][constexpr]]初始化器（包括[[id:27733720-d27e-4852-bb07-b50130457fc9][字面值]]）作为初始值的全局变量；没有初始值的全局变量（被0初始化）
   - 动态初始化 :: 非 constexpr初始化器 作为初始值初始化的全局变量
     #+begin_src cpp :results output :namespaces std :includes <iostream>
     int init()
     {
         return 5;
     }

     int g_something{ init() }; // non-constexpr initialization
     #+end_src

3. *动态初始化阶段问题*
   解决方式：const全局变量等...（[[https://www.learncpp.com/cpp-tutorial/why-non-const-global-variables-are-evil/][learncpp7.8]]，遇到再看）
   1) 由于 *全局变量相互依赖* 导致的 *问题*
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   int initX();  // forward declaration
   int initY();  // forward declaration
   int g_x{ initX() }; // g_x is initialized first；由于 g_x 依赖于 g_y，但后者还没初始化，因此导致前者为 0
   int g_y{ initY() };
   int initX()
   {
       return g_y; // g_y isn't initialized when this is called
   }
   int initY()
   {
       return 5;
   }
   int main()
   {
       std::cout << g_x << ' ' << g_y << '\n';
   }
   #+end_src
   #+RESULTS:
   : 0 5

   2) *不同[[id:d8366823-aedc-4b95-ab2f-f81d3aadea6e][翻译单元]]中静态对象的初始化顺序不明确*
   #+begin_example
   给定两个文件，a.cpp 和 b.cpp，二者的全局变量都有可能先被初始化。如果 a.cpp 中某个具有静态生存期的变量是用 b.cpp 中定义的一个具有静态生存期的变量初始化的，那么 b.cpp 中的这个变量有50% 的可能性尚未初始化
   #+end_example



3. *默认初始化* 为 0
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   // Non-constant global variables
   int g_x;                 // defines non-initialized global variable (zero initialized by default)
   int g_x {};              // defines explicitly value-initialized global variable
   int g_x { 1 };           // defines explicitly initialized global variable

   // Const global variables
   const int g_y;           // error: const variables must be initialized
   const int g_y { 2 };     // defines initialized global const

   // Constexpr global variables
   constexpr int g_y;       // error: constexpr variables must be initialized
   constexpr int g_y { 3 }; // defines initialized global constexpr
   #+end_src

4. *命名规范* ： =g_= 前缀

5. 具有 *静态生命周期* ；见：[[id:853a3bee-b823-49fc-acd6-804eecb74822][生命周期]]

6. *命名空间中的变量* 是 全局变量

7. [[id:a8100707-ed3c-4c60-ad7c-61ae20bf4da6][多个文件中共享全局常量]]
