:PROPERTIES:
:ID:       d296e2b2-3557-479c-ad2d-58c1600fbfd9
:END:
#+title: 函数模板
#+filetags: cpp

* 函数模板 [[https://www.learncpp.com/cpp-tutorial/function-templates/][learncpp11.6]] [[https://www.learncpp.com/cpp-tutorial/function-template-instantiation/][learncpp11.7]] [[https://www.learncpp.com/cpp-tutorial/function-templates-with-multiple-template-types/][learncpp11.8]]
1. 用于创建一系列的 [[id:6c92dc3d-9ce0-4d40-9597-5ecc93ea3366][重载函数]]； *[[id:9148c346-c9dd-4480-9b37-25d448987e98][模板参数]]* 作为类型的占位符；在编译期 编译器遇到 *函数调用* 时发生 *实例化* ，能用 [[id:5aea3bf8-964d-4925-91bf-c5cf83f88753][=delete]] 删除某些实例化函数 [fn:1] （在发生实例化的文件处 *复制* 一份模板，模板参数 -> 具体类型，因此会 *增加编译时间* [fn:4]）

2. 在 *多个源文件* 中使用函数模板：会发生 链接错误，解决方法是将 模板放入 =.h= 头文件，然后 =include= 进 =.cpp= 源文件；见：[[id:21dd5470-8f8b-4d95-8c33-cb741b817fbc][在多个文件中使用函数模板]]

3. 普通函数调用语法 *优先匹配* 非模板函数，而不是模板实例化后同样可行的函数（原因在于 选择更特殊版本）
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   // This function template can handle many types, so its implementation is generic
   template <typename T>
   void print(T x)
   {
       std::cout << x; // print T however it normally prints
   }

   // This function only needs to consider how to print a bool, so it can specialize how it handles
   // printing of a bool
   void print(bool x)
   {
       std::cout << std::boolalpha << x; // print bool as true or false, not 1 or 0
   }

   int main()
   {
       print<bool>(true); // calls print<bool>(bool) -- prints 1
       std::cout << '\n';

       print<>(true);     // deduces print<bool>(bool) (non-template functions not considered) -- prints 1
       std::cout << '\n';

       print(true);       // calls print(bool) -- prints true
       std::cout << '\n';

       return 0;
   }
   #+end_src

4. 通过 不同数量的类型模板参数 实现 *函数模板重载* [fn:3]

5. 带有 [[id:be24bcfa-3a9e-4e52-93e4-66163f87f280][static(静态局部变量)]] 的函数模板，需要注意可能因为不同的实例化导致非预期结果 [fn:2]



* Footnotes

[fn:4]
#+name: 原始模板代码
#+begin_src cpp :results output :namespaces std :includes <iostream>
template <typename T>
T max(T x, T y)
{
    return (x < y) ? y : x;
}

int main()
{
    std::cout << max<int>(1, 2) << '\n'; // instantiates and calls function max<int>(int, int)
    std::cout << max<int>(4, 3) << '\n';
    return 0;
}
#+end_src

#+name: 模板实例化后的代码
#+begin_src cpp :results output :namespaces std :includes <iostream>
// a declaration for our function template (we don't need the definition any more)
template <typename T>
T max(T x, T y);

template<>
int max<int>(int x, int y) // 实例化后的 函数
{
    return (x < y) ? y : x;
}

int main()
{
    std::cout << max<int>(1, 2) << '\n'; // instantiates and calls function max<int>(int, int)
    std::cout << max<int>(4, 3) << '\n';    // calls already instantiated function max<int>(int, int)
    return 0;
}
#+end_src

[fn:3]
#+begin_src cpp :results output :namespaces std :includes <iostream>
// Add two values with matching types
template <typename T>
auto add(T x, T y)
{
    return x + y;
}

// Add two values with non-matching types
// As of C++20 we could also use auto add(auto x, auto y)
template <typename T, typename U>
auto add(T x, U y)
{
    return x + y;
}

// Add three values with any type
// As of C++20 we could also use auto add(auto x, auto y, auto z)
template <typename T, typename U, typename V>
auto add(T x, U y, V z)
{
    return x + y + z;
}

int main()
{
    std::cout << add(1.2, 3.4) << '\n'; // instantiates and calls add<double>()
    std::cout << add(5.6, 7) << '\n';   // instantiates and calls add<double, int>()
    std::cout << add(8, 9, 10) << '\n'; // instantiates and calls add<int, int, int>()

    return 0;
}
#+end_src


[fn:1]
#+begin_src cpp :results output :namespaces std :includes <iostream>
#include <string>

template <typename T>
T addOne(T x)
{
    return x + 1;
}

// Use function template specialization to tell the compiler that addOne(const char*) should emit a compilation error
// const char* will match a string literal
template <>
const char* addOne(const char* x) = delete;

int main()
{
    std::cout << addOne("Hello, world!") << '\n'; // compile error

    return 0;
}
#+end_src

[fn:2]
#+begin_src cpp :results output :namespaces std :includes <iostream>
#include <iostream>

// Here's a function template with a static local variable that is modified
template <typename T>
void printIDAndValue(T value)
{
    static int id{ 0 };
    std::cout << ++id << ") " << value << '\n';
}

int main()
{
    printIDAndValue(12);
    printIDAndValue(13);

    printIDAndValue(14.5);

    return 0;
}
#+end_src

#+RESULTS:
: 1) 12
: 2) 13
: 1) 14.5

这里的 1) 14.5 是因为 使用了新的模板实例化
#+begin_src cpp :results output :namespaces std :includes <iostream>
template <typename T>
void printIDAndValue(T value);

template <>
void printIDAndValue<int>(int value)
{
    static int id{ 0 };
    std::cout << ++id << ") " << value << '\n';
}

template <>
void printIDAndValue<double>(double value)
{
    static int id{ 0 };
    std::cout << ++id << ") " << value << '\n';
}

int main()
{
    printIDAndValue(12);   // calls printIDAndValue<int>()
    printIDAndValue(13);   // calls printIDAndValue<int>()

    printIDAndValue(14.5); // 这里使用了新的模板实例：calls printIDAndValue<double>()

    return 0;
}
#+end_src
