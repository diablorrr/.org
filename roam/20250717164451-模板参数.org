:PROPERTIES:
:ID:       9148c346-c9dd-4480-9b37-25d448987e98
:END:
#+title: 模板参数
#+filetags: cpp

* 模板参数
1. 模板参数 *种类* 有3种
   1) 类型模板参数
   2) 非类型模板参数
   3) 模板模板参数

2. 类型模板参数 *声明* ： =template <typename>= 可以多个 类型模板参数，返回值可以用 [[id:bee683d2-eec4-45a8-af02-be369d182e8d][auto]] 自动推导
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   template <typename T, typename U>
   auto max(T x, U y) // 如果这里不用 auto ，使用 T，则结果为 3
   {
       return (x < y) ? y : x;
   }

   int main()
   {
       std::cout << max(2, 3.5) << '\n';
       return 0;
   }
   #+end_src

   #+RESULTS:
   : 3.5

3. 类型模板参数 *命名规范* 见 [[id:29f43a49-8123-4541-a02d-02c7ed24a042][命名规范]]

4. 类型模板参数 *推导* ：根据传入的实参进行推导，不会进行类型转换（[[id:1b0646eb-ed64-4b37-a394-4974750aaf7a][类型转换]] 只在 [[id:6c92dc3d-9ce0-4d40-9597-5ecc93ea3366][函数重载]]的[[id:8c55eec4-57bb-45c2-8890-c65d7c473a24][重载解析]] 时发生）
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   std::cout << max<int>(1, 2) << '\n'; // 没有使用模板参数推导
   std::cout << max<>(1, 2) << '\n';    // 使用模板参数推导
   std::cout << max(1, 2) << '\n';      // 使用模板参数推导
   // 都会推导出 max<int>(int, int)
   #+end_src

5. 非类型模板参数 *定义* 如下，是一种具有 *固定类型的模板参数* ，那么它的意义在于 让函数参数为 [[id:b06260e2-ed7a-4b12-8e9d-b07a3e564a75][constexpr]]（因为一般 函数参数不能为 constexpr） [[https://www.learncpp.com/cpp-tutorial/non-type-template-parameters/][learncpp11.9]]
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   template <int N> // 一般用 N 表示；declare a non-type template parameter of type int named N
   void print()
   {
       std::cout << N << '\n'; // use value of N here
   }

   int main()
   {
       print<5>(); // 5 is our non-type template argument

       return 0;
   }
   #+end_src
