:PROPERTIES:
:ID:       1f772bce-0f88-46a2-ab44-c9bf04b30653
:END:
#+title: 引用(左值引用)
#+filetags: cpp

* 引用(左值引用) [[https://www.learncpp.com/cpp-tutorial/lvalue-references/][learncpp12.3]]
1. 被引用对象的一个 *别名* ；必须初始化，不能改变引用的对象
2. 引用需要和被引用对象的类型 *一致* ，如果不同，编译器会尝试进行 [[id:9c9c2b6a-92d9-431f-9f25-7f588848596a][隐式类型转换]]
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   int main()
   {
       int x { 5 };
       int& ref { x };            // okay: referenced type (int) matches type of initializer

       double d { 6.0 };
       int& invalidRef { d };     // invalid: conversion of double to int is narrowing conversion, disallowed by list initialization
       double& invalidRef2 { x }; // 这里 x 被编译器隐式转换为 double，此时是右值，左值引用无法绑定右值；invalid: non-const lvalue reference can't bind to rvalue (result of converting x to double)

       return 0;
   }
   #+end_src

3. *悬空引用* ：被引用对象 在 引用 之前销毁（ *引用是不会被销毁的，因为它只是一个别名、一个编译期的符号* ）
   在函数中返回 *const左值引用绑定的临时值* ，会导致 悬空引用，非常经典的例子见：[[id:119083e2-90b1-4ac8-8938-4fa0b68b304a][按引用返回]]

4. *左值引用 与 const*
   - 非const左值引用 :: 不能绑定 const左值或右值 [fn:1]
   - const左值引用 :: 可以绑定 [[https://www.learncpp.com/cpp-tutorial/lvalue-references-to-const/][learncpp12.4]]
     1. const左值
     2. 非const左值
     3. *右值*
     #+begin_src cpp :results output :namespaces std :includes <iostream>
     int main()
     {
         int x { 5 };              // x is a modifiable lvalue
         const int& ref { x };     // 绑定 非const左值
         const int& ref2 { 6 };    // 绑定 右值，延长临时对象生命周期和引用一致

         std::cout << ref << '\n'; // okay: we can access the object through our const reference
         //ref = 7;                // error: we can not modify an object through a const reference

         x = 6;                    // okay: x is a modifiable lvalue, we can still modify it through the original identifier
         std::cout << ref2 << '\n';
         return 0;
     } // ref2 和 临时对象 此处销毁
     #+end_src

     #+RESULTS:
     : 5
     : 6

     为什么可以绑定右值？ *创建临时对象，用右值初始化它，再用引用绑定该临时对象* ； *临时对象的生命周期* 延长到和引用一致

     + 使用场景 :: [[https://www.learncpp.com/cpp-tutorial/pass-by-lvalue-reference/][learncpp12.5]]： *作为函数参数* -> 开销小、不会修改传入对象、能接收多种值（const左值、非const左值、右值）
       - 背景 :: 值传递对于大的对象，开销很大（复制 -> 操作 -> 销毁）；引用传递开销小，但是可能修改原始对象，且只能接收 非const左值



* Footnotes

[fn:1]
#+begin_src cpp :results output :namespaces std :includes <iostream>
int main()
{
    int x { 5 };
    int& ref { x };         // okay: non-const lvalue reference bound to a modifiable lvalue
  const int y { 5 };
    int& invalidRef { y };  // invalid: non-const lvalue reference can't bind to a non-modifiable lvalue
    int& invalidRef2 { 0 }; // invalid: non-const lvalue reference can't bind to an rvalue
  return 0;
}
#+end_src
