:PROPERTIES:
:ID:       878bbff5-6362-4cf9-ab1c-15bc1849cd79
:END:
#+title: 指针
#+filetags: cpp

* 指针 [[https://www.learncpp.com/cpp-tutorial/introduction-to-pointers/][learncpp12.7]] [[https://www.learncpp.com/cpp-tutorial/null-pointers/][learncpp12.8]]
1. 指针是一个 *对象* ，存储地址；可选初始化，后续能改变指向对象

2. 指针需要和被指对象类型 *一致* ，如果不同，会报错，除非某些特定情况...

3. 指针 *大小* 由系统架构决定，[[id:ddbf120e-034e-4fdc-96cd-92df650d588e][32位和64位系统]] 分别为 4字节（32位） 和 8字节（64位）

4. *相关* 指针
   - 野指针   :: 未初始化的指针
   - 悬空指针 :: 被指对象 在 指针 之前销毁 见：[[id:6782179f-792b-4eb6-807c-4f95aba88169][内存泄漏]]
   - 空指针   :: 不指向任何对象 ->（推荐） =nullptr= （古代）NULL、0
     （NULL 和 0 可能 *被误认为整型* ，导致 [[id:6c92dc3d-9ce0-4d40-9597-5ecc93ea3366][函数重载]] 歧义 [fn:1]）[[https://www.learncpp.com/cpp-tutorial/pass-by-address-part-2/][learncpp12.11]]
   - [[id:ee21abb8-cd89-4207-bbbe-49c4ed887fed][函数指针]] :: 指向函数的指针
   - 数组指针 :: 由[[id:0cd3f518-394f-477b-8969-e4a61486357c][C风格数组]]退化而来
   - [[id:7cb0d4aa-e74a-4563-acf6-053e129105e9][智能指针]] :: RAII思想的体现，用于自动化管理资源的生命周期

5. *指针与const* [[https://www.learncpp.com/cpp-tutorial/pointers-and-const/][learncpp12.9]]
   - 指针常量 :: 指针是const的  -> 指向不可变，指向的值可变
   - 常量指针 :: 指向常量的指针 -> 指向可变，指向的值不可变
   - 修饰规则 :: ✨ 先左后右
     #+begin_src cpp :results output :namespaces std :includes <iostream>
     const int*       // 指向整型常量的指针
     int const *      // 指向整型常量的指针
     int* const       // 指向整型的常量指针
     const int* const // 指向整型常量的常量指针
     #+end_src

6. *指针与函数* 指针可用于 [[id:d8c76fec-fe5e-44f9-a9ff-ef95ec356bce][地址传递]]



* Footnotes

[fn:1]
#+begin_src cpp :results output :namespaces std :includes <iostream>
#include <cstddef> // for NULL

void print(int x) // this function accepts an integer
{
  std::cout << "print(int): " << x << '\n';
}

void print(int* ptr) // this function accepts an integer pointer
{
  std::cout << "print(int*): " << (ptr ? "non-null\n" : "null\n");
}

int main()
{
  int x{ 5 };
  int* ptr{ &x };

  print(ptr);  // always calls print(int*) because ptr has type int* (good)
  print(0);    // always calls print(int) because 0 is an integer literal (hopefully this is what we expected)

  print(NULL); // this statement could do any of the following:
  // call print(int) (Visual Studio does this)
  // call print(int*)
  // result in an ambiguous function call compilation error (gcc and Clang do this)

  print(nullptr); // always calls print(int*)

  return 0;
}
#+end_src
