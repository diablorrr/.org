:PROPERTIES:
:ID:       8f6af97c-9e71-4056-865b-ee98eb263939
:END:
#+title: 无作用域枚举
#+filetags: cpp

* 无作用域枚举
1. *无作用域枚举* =enum=
2. *没有创建新的作用域* ，枚举成员的标识符 导入到 枚举定义 所在的作用域中 -> 因此可能造成命名冲突 ->（ *Best Practice* ）使用 [[id:604d5ad5-f060-4504-b407-933fc82aeb7e][命名空间]] 包裹枚举类型
3. *可以 隐式转换为整型*  ，反之不行（可以用 =static_cast= 显示转换）
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   // 这个枚举定义在全局作用域
   enum Color /* : std::int8_t */  //设置整型的底层类型
   {
       red,   // 因此 red 标识符 被导入到 全局作用域中
       blue,
   };

   // enum Color2
   // {
   //    red,  // 编译错误：全局空间中已经有 red 了
   // };

   // 解决方式（Best Practice）：将枚举放入 命名空间中
   namespace C {
       enum Color2
       {
           red,  // 0
           blue, // 1
           yellow = -3, // -3
           green,        // -2
       };
   }

   int main()
   {
       Color apple { red }; // my apple is red

       // 2种访问方式
       // 因为没有创建作用域因此可以直接访问
       // 因为无作用域枚举会隐式转换为整型，因此 cout 可以直接打印
       cout << "访问red：" << red << '\n';
       cout << "另一种方式访问red：" << Color::red <<'\n';

       // 用命名空间包裹枚举
       cout << "命名空间访问red：" << C::red << '\n';
       cout << "另一种命名空间访问red：" << C::Color2::red << '\n';

       // 使用 static_cast 将整型显式转换为枚举成员
       // Color banana {0}; 编译错误：整型无法隐式转换为枚举成员
       Color banana {static_cast<Color>(0)};
       cout << "static_cast 将整型转换为枚举成员：" << banana << '\n';
   }
   #+end_src

   #+RESULTS:
   : 访问red：0
   : 另一种方式访问red：0
   : 命名空间访问red：0
   : 另一种命名空间访问red：0
   : static_cast 将整型转换为枚举成员：0

   cpp17后，若 *显示指定整型的底层类型* ，以 *列表初始化* 的方式可以将 整型 隐式转换为 枚举成员 [fn:1]

   #+begin_src cpp :results output :namespaces std :includes <iostream> <cstdint>
   enum Color
   {
       black,       // 0
       red,         // 1
       blue,        // 2
       yellow = -3, // -3
       test,        // -2
   };

   int main()
   {
       Color shirt{ blue };    // shirt actually stores integral value 2
       cout << yellow << '\n'; // 枚举成员隐式转换为整数 -3
       cout << test << '\n';
       Color tt {static_cast<Color>(2)}; // 通过 static_cast 的方式将整型转为枚举成员
                                         // Color tt {2}; 编译错误：整型无法隐式转换为枚举成员
       cout << tt << '\n';
       return 0;
   }
   #+end_src

   #+RESULTS:
   : -3
   : -2
   : 2



* Footnotes

[fn:1]
#+begin_src cpp :results output :namespaces std :includes <iostream>
enum Pet: int // we've specified a base
{
    cat, // assigned 0
    dog, // assigned 1
    pig, // assigned 2
    whale, // assigned 3
};

int main()
{
    Pet pet1 { 2 }; // ok: can brace initialize unscoped enumeration with specified base with integer (C++17)
    Pet pet2 (2);   // compile error: cannot direct initialize with integer
    Pet pet3 = 2;   // compile error: cannot copy initialize with integer
    pet1 = 3;       // compile error: cannot assign with integer

    return 0;
}
#+end_src
