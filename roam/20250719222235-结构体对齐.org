:PROPERTIES:
:ID:       2c06fba7-342c-42ba-a063-176b6c3c8a4d
:END:
#+title: 类大小/类继承内存布局
#+filetags: cpp

* 类大小(结构体大小)的影响因素 [[https://www.bilibili.com/video/BV1akQ5YwEYt/?spm_id_from=333.337.search-card.all.click&vd_source=4441bc96046659b39d059d583f36ff52][bilibili-程序员陈子青]]
- static成员变量 :: 存储在全局区，不占类对象大小 [fn:1]
- 虚函数         :: 虚函数表指针：8 字节 [fn:3]
- 虚继承         :: 虚基类指针：8 字节 [fn:4]
- 内存对齐规则   :: 类大小为最大成员变量数据类型的倍数，类大小没达到就填充字节 [fn:2] [[https://www.learncpp.com/cpp-tutorial/struct-miscellany/][learncpp13.11]]
  -> *作用* ：编译器为了 *优化内存访问效率*
- 空类           :: 1 字节，用于区分空类对象 [fn:5]


* 类继承内存布局
单继承、多继承、虚函数、虚继承


* Footnotes

[fn:5]
#+name: 空类大小
#+begin_src cpp :results output :namespaces std :includes <iostream>
class Empty {}; // 1字节：用于区分空类对象（cpp标准要求每个对象独立唯一的内存地址；若空类大小为0字节，多个空类实例就无法拥有不同地址）

int main() {
  cout << sizeof(Empty) << '\n';
}
#+end_src

#+RESULTS: 空类大小
: 1

[fn:4]
#+name: 虚继承
#+begin_src cpp :results output :namespaces std :includes <iostream>
class Base
{
  double a;          // 8字节
};

class Derived : virtual public Base // g++ 为24；MSVC 为36
{
  // vbptr           // 8字节（虚基类指针）
  int b;             // 4字节 -> 4 + 4
  // double a;       // 8字节（继承来的成员变量）
  // 通过虚基类指针的偏移来访问到父类的成员变量，用于解决重复包含问题

  // class base      // 8字节（MSVC的特殊机制：父类内存大小的缓存空间）
};

int main() {
  cout << sizeof(Derived) << '\n';
}
#+end_src

#+RESULTS: 虚继承
: 24

[fn:3]
#+name: 虚函数
#+begin_src cpp :results output :namespaces std :includes <iostream>
class A
{
  // VirtualTable* __vptr;           // 8字节（虚函数表指针）
  int x;                             // 4字节 -> 4 + 4
  virtual void f() {}
};

int main() {
  cout << sizeof(A) << '\n';
}
#+end_src

#+RESULTS: 虚函数
: 16

[fn:2]
#+name: 内存对齐
#+begin_src cpp :results output :namespaces std :includes <iostream>
struct A          // A总大小填充为 8的倍数 -> 16
{
    short a {};   // 2字节 -> 2 + 2
    int b {};     // 4字节
    double c {};  // 8字节
};

class B           // B总大小填充为 8的倍数 -> 24
{
  char a;         // 1字节 -> 1 + 7
  double b;       // 8字节
  int c;          // 4字节 -> 4 + 4
};

class C           // C总大小填充为 8的倍数 -> 16
{
  double b;       // 8字节
  char a;         // 1字节 -> 1 + 3
  int c;          // 4字节 ->
};


int main() {
  cout << sizeof(A) <<'\n';
  cout << sizeof(B) <<'\n';
  cout << sizeof(C) <<'\n';
}
#+end_src

#+RESULTS: 内存对齐
: 16
: 24
: 16

[fn:1]
#+name: static
#+begin_src cpp :results output :namespaces std :includes <iostream>
class A {
  static int a; // 全局数据区，不占类大小
  int c;        // 4字节
  int i;        // 4字节
};

int main() {
  cout << sizeof(A) << '\n';
}
#+end_src

#+RESULTS:
: 8
