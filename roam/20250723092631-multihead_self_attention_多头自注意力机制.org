:PROPERTIES:
:ID:       31296065-6905-44d9-b881-b61002bbfcf0
:END:
#+title: MultiHead-Self-Attention(多头自注意力机制)
#+filetags: deep_learning

* MultiHead-Self-Attention(多头自注意力机制)
#+begin_src python
import math
import torch
import torch.nn as nn

class MultiHeadAttention(nn.Module):
    def __init__(self, hidden_dim, nums_head) -> None:
        super().__init__()

        self.hidden_dim = hidden_dim

        self.nums_head = nums_head
        self.head_dim = hidden_dim // nums_head

        self.q_proj = nn.Linear(hidden_dim, hidden_dim) # hidden_dim = head_dim * nums_head
        self.k_proj = nn.Linear(hidden_dim, hidden_dim)
        self.v_proj = nn.Linear(hidden_dim, hidden_dim)

        self.atten_dropout = nn.Dropout(0.1)

        self.output_proj = nn.Linear(hidden_dim, hidden_dim)

    def forward(self, X, attention_mask=None):
        # X (batch, seq, hidden_dim)
        batch_size, seq_len, _ = X.size()

        # Q、K、V (batch, seq, hidden_dim)
        Q = self.q_proj(X)
        K = self.k_proj(X)
        V = self.v_proj(X)

        # 拆分head -> (batch, nums_head, seq, head_dim)
        q_state = Q.view(batch_size, seq_len, self.nums_head, self.head_dim).permute(0, 2, 1, 3)
        k_state = K.view(batch_size, seq_len, self.nums_head, self.head_dim).transpose(1, 2)
        v_state = V.view(batch_size, seq_len, self.nums_head, self.head_dim).transpose(1, 2)

        # 计算注意力权重 attention_weight (batch, nums_head, seq, seq)
        # 这里并行且独立的计算了每个头，后续 softmax 和 dropout 同样作用于每个头
        attention_weight = q_state @ k_state.transpose(-1, -2) // math.sqrt(self.head_dim)

        # 掩码
        if attention_weight is not None:
            attention_weight = attention_weight.masked_fill(
                attention_mask == 0, float("-1e20")
            )

        # 第4个维度 softmax
        attention_weight = torch.softmax(attention_weight, dim=3)
        print(attention_weight)
        attention_weight = self.atten_dropout(attention_weight)

        # ouput_mid (batch, nums_head, seq, head_dim)
        output_mid = attention_weight @ v_state

        # output_mid (batch, seq, nums_head, head_dim)
        output_mid = output_mid.transpose(1, 2).contiguous()

        # output (batch, seq, hidden_dim)
        output = output_mid.view(batch_size, seq_len, -1) # -1 是占位符，batch、seq 固定，第三维自动计算
                                                          # 这里的 batch_size、seq_len 是前边提取出的

        output = self.output_proj(output)
        return output

attention_mask = (
    torch.tensor(
        [
            [0, 1],
            [0, 0],
            [1, 0],
        ]
    )
    .unsqueeze(1)
    .unsqueeze(2)
    .expand(3, 8, 2, 2)
)

x = torch.rand(3, 2, 128)
net = MultiHeadAttention(128, 8)
net(x, attention_mask).shape
#+end_src
