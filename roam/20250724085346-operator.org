:PROPERTIES:
:ID:       10836d5b-7793-47c0-950c-383cbb4933f5
:END:
#+title: operator[]
#+filetags: cpp

* operator[] [[https://www.learncpp.com/cpp-tutorial/pointer-arithmetic-and-subscripting/][learncpp17.9]]
1. 下标运算符 *不进行边界检查* ，底层 *通过指针运算实现* ： =ptr[n]= -> =*((ptr) + (n))=
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   int main()
   {
       const int arr[] { 3, 2, 1 };

       // 下标运算符
       std::cout << &arr[0] << ' ' << &arr[1] << ' ' << &arr[2] << '\n';
       std::cout << arr[0] << ' ' << arr[1] << ' ' << arr[2] << '\n';

       // 等价的指针运算形式
       std::cout << arr<< ' ' << (arr+ 1) << ' ' << (arr+ 2) << '\n';
       std::cout << *arr<< ' ' << *(arr+ 1) << ' ' << *(arr+ 2) << '\n';
       return 0;
   }
   #+end_src

   #+RESULTS:
   : 0x7ffcb5a8199c 0x7ffcb5a819a0 0x7ffcb5a819a4
   : 3 2 1
   : 0x7ffcb5a8199c 0x7ffcb5a819a0 0x7ffcb5a819a4
   : 3 2 1

   *指针运算的用途* 在没有显式索引的情况下遍历 C风格数组
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   int main()
   {
     constexpr int arr[]{ 9, 7, 5, 3, 1 };
     const int* begin{ arr };                // begin points to start element
     const int* end{ arr + std::size(arr) }; // end points to one-past-the-end element
     for (; begin != end; ++begin)           // iterate from begin up to (but excluding) end
     {
         std::cout << *begin << ' ';     // dereference our loop variable to get the current element
     }

     // 也能将循环放入这样一个函数：
     // void printArray(const int* begin, const int* end)
     return 0;
   }
   #+end_src
