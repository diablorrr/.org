:PROPERTIES:
:ID:       4366a3d0-3bc8-4b7d-a7e3-b730e96d0c01
:END:
#+title: 迭代器(iterators)
#+filetags: cpp

* 迭代器(iterators) [[https://www.learncpp.com/cpp-tutorial/introduction-to-iterators/][learncpp18.2]]
1. 容器中一般都定义了迭代器，不支持迭代器（[[id:0cd3f518-394f-477b-8969-e4a61486357c][C风格数组]]）的可以使用 =std::begin()= 、 =std::end()=
   #+begin_src cpp :results output :namespaces std :includes <iostream>
   int arr[] = {1,2,3};

   auto beg = std::begin(arr);
   auto end = std::end(arr);

   for (; beg != end; ++beg) {
     cout << *beg << '\n';
   }
   #+end_src

   #+RESULTS:
   : 1
   : 2
   : 3

2. *迭代器失效* ：容器大小改变（正在迭代的元素 *改变地址或销毁* ）[fn:1]

3. *迭代器比较* 使用 =operator!== 而不是 operator< ：前者所有迭代器都支持（不使用迭代器的普通循环使用 后者）

* Footnotes

[fn:1]
#+begin_src cpp :results output :namespaces std :includes <iostream> <vector>
std::vector v { 0, 1, 2, 3 };

for (auto num : v) // 基于范围的for：背后使用迭代器
{
    if (num % 2 == 0)
        v.push_back(num + 1); // 迭代器失效
    cout << num << '\n';
}

#+end_src

#+RESULTS:
: 0
: 5
: 30164373
: -898947855
