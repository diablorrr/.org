:PROPERTIES:
:ID:       5b709163-a1e7-49cf-8e66-d6cfe35a38c3
:END:
#+title: 信号量
#+filetags: operating_system

* 信号量
1. 本质是一个 *整数* ，表示 *资源个数* ；通过 *PV操作* 实现进程间 *互斥* 和 *同步* ；信号量和PV操作实现 [fn:1]
   - P    :: =信号量-1= ；P后信号量<0 ，说明资源已经被占用，阻塞
   - V    :: =信号量+1= ；V后信号量<=0，说明有进程在等待，唤醒队首进程
   - 互斥 :: =初始信号量=1=
   - 同步 :: =初始信号量=0=

2. 信号量是 *"万能工具"* ，可以实现 所有的[[id:ac8c9c6d-760b-4ec8-847b-cbedebee7085][锁]]和条件变量（也就是能实现 互斥、同步）


* Footnotes

[fn:1]
#+begin_src c
typeder struct sem_t {
  int sem;      // 资源个数
  queue_t *q;   // 等待队列
} sem_t;

void init(sem_t *s, int sem) {
  s->sem = sem;     // 初始化信号量（资源个数）
  queue_init(s->q); // 初始化队列
}

// P操作
void P(sem_t *s) {
  s->sem--;
  if (s->sem < 0) {
    1. 保存 现在运行线程的 TCB;
    2. 将 TCB 插入等待队列;
    3. 设置线程为 等待状态;
    4. 调度程序;
  }
}

// V操作
void V(sem_t *s) {
  s->sem++;
  if (s->sem <= 0) {
    1. 移出 等待队列的队头元素;
    2. 将 线程TCB 插入 就绪队列;
    3. 设置线程为 就绪状态;
  }
}
#+end_src
