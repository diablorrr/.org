:PROPERTIES:
:ID:       10d11f18-c43a-4af3-bcf5-b7e1f738587a
:END:
#+title: mysql一行记录是怎么存储的？
#+filetags: mysql

* mysql的InnoDB是如何存储数据的？ [[https://xiaolincoding.com/mysql/base/row_format.html#mysql-%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E6%94%BE%E5%9C%A8%E5%93%AA%E4%B8%AA%E6%96%87%E4%BB%B6][小林coding]]
mysql数据存储在 =/var/lib/mysql= ，当我们创建一个数据库，并在数据库中创建一个表后，会出现以下文件：
1. =.opt= ：当前数据库 默认字符集、字符校验规则
2. =.frm= ：存储 表结构
3. =.ibd= ：存储 表数据

mysql 默认使用 InnoDB存储引擎，InnoDB 存储数据原理，见：[[id:3667ef60-40f5-40a2-95c1-95a41156b22c][图:表空间文件结构]]

** 图:表空间文件结构 :ATTACH:
:PROPERTIES:
:ID:       3667ef60-40f5-40a2-95c1-95a41156b22c
:END:
[[attachment:_20250827_153029screenshot.png]]
1. *表空间* 包含多个段，是存放数据的物理文件（对应 .ibd文件），B+树是存放数据的逻辑结构 -> 表空间文件 约等于 B+树在物理上的存储形式
2. *段*     包含多个区，用于在逻辑上管理B+树的不同部分，将B+树划分为叶子节点段（数据段）和非叶子节点段（索引段）
3. *区*    （1MB/64个页） 包含多个页，区是 InnoDB存储引擎 分配磁盘空间的单位，用于减少磁盘空间分配次数
4. *页*    （16KB）包含多个行，用于减少磁盘IO次数，对应B+树中的一个节点
5. *行*     存放真实记录，聚簇索引的情况下对应B+树中叶子节点中的数据


* InnoDB 行格式（主要介绍 COMPACT）[[https://xiaolincoding.com/mysql/base/row_format.html#compact-%E8%A1%8C%E6%A0%BC%E5%BC%8F%E9%95%BF%E4%BB%80%E4%B9%88%E6%A0%B7][小林coding]]
InnoDB 中 =COMPACT行格式= 主要分为：额外信息部分、真实数据部分

*额外信息部分* ：包含 变长字段长度列表、NULL值列表、记录头信息
- 变长字段长度列表 ::
  只出现在 有变长字段的表中，字段长度<255字节用1字节表示，否则用2字节表示
  逆序存放 该行记录中所有变长字段的长度
- NULL值列表       ::
  只出现在 允许有NULL字段的表中，至少占1字节，用字节中的比特位表示该字段是否为NULL值（1为NULL，0为非NULL），若 允许为NULL的字段数 > 8 则用2字节，以此类推
  逆序存放该行记录中 允许NULL值的列
- 记录头信息       ::
  固定5字节，包含 delete_mask 用于标记该行数据是否被删除
  next_record 指向下一个记录的位置，指向的部分在记录头信息和数据部分之间（因此变长字段长度列表、NULL值列表逆序存放，这样可以指针从后往前顺序访问 额外信息部分）

*真实数据部分* ：
- 隐藏列 row_id   :: (6字节) 行ID：当表没有定义主键时，InnoDB 自动生成一个隐藏的主键使用此列
- 隐藏列 trx_id   :: (6字节) 事务ID：记录最近一次修改该行数据的事务ID。用于实现 MVCC（多版本并发控制）
- 隐藏列 roll_ptr :: (7字节) 回滚指针：指向该行记录在 undo log 中的上一个历史版本，用于实现 MVCC和事务回滚
- 列值            :: 正序存储所有列数据，若行过大，在数据部分会记录部分数据和一个指向溢出页的地址，溢出页中记录溢出的数据

Dynamic行格式 则是在真实数据处存放20字节地址指向溢出页，溢出页中存放数据

** 图:COMPACT行格式 :ATTACH:
:PROPERTIES:
:ID:       8ba3e947-af2e-44ca-bdc7-18b27a173dd5
:END:
[[attachment:_20250827_194913screenshot.png]]
